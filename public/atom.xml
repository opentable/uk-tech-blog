<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OpenTable Tech UK Blog</title>
  <subtitle>The technology blog for OpenTable UK.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tech.opentable.co.uk/"/>
  <updated>2017-06-30T15:17:56.000Z</updated>
  <id>http://tech.opentable.co.uk/</id>
  
  <author>
    <name>OpenTable</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hosting External Events at OpenTable</title>
    <link href="http://tech.opentable.co.uk//blog/2017/06/30/hosting-external-events-at-opentable/"/>
    <id>http://tech.opentable.co.uk//blog/2017/06/30/hosting-external-events-at-opentable/</id>
    <published>2017-06-30T16:09:04.000Z</published>
    <updated>2017-06-30T15:17:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>This June, OpenTable hosted the <a href="https://www.meetup.com/London-Machine-Learning-Study-Group/" target="_blank" rel="external">London Machine Learning Study Group</a> to great success. We provided the food, drinks, and space for an extremely talented speaker and over 100 RSVPs. It was also my first experience hosting an external meetup at OpenTable - and I learned a lot!</p>
<h2 id="My-Experience"><a href="#My-Experience" class="headerlink" title="My Experience"></a>My Experience</h2><p>OpenTable has frequently hosted meetups in our office such as <a href="https://www.meetup.com/WebPlatform-London/" target="_blank" rel="external">Web Platform London</a> and <a href="https://twitter.com/webdeldn" target="_blank" rel="external">WEBdeLDN</a>. However, acting as an event host was a complete unknown for me, so leading up to the machine learning event, I made a point of sitting down with someone with previous experience. This was to document the key steps in setting up an external event, and then this information was published on our internal wiki so as to avoid siloing useful information for future use. Following the steps documented in the wiki proved invaluable in reducing my stress on the day. Hopefully this will be true for other hosts moving forward, and it can become the goto source of information for event hosts.</p>
<h2 id="Retrospective"><a href="#Retrospective" class="headerlink" title="Retrospective"></a>Retrospective</h2><p>Following our last meetup, we held a retrospective between the OpenTable event coordinators and the Director of UK Engineering as, along with the London Machine Learning Study Group, we have had a recent spate of meetups at OpenTable. This was extremely useful to underline our shared experiences as well as the considerations we want to make for our next external event. The main discussion points being,</p>
<h3 id="Push-social-media-more"><a href="#Push-social-media-more" class="headerlink" title="Push social media more"></a>Push social media more</h3><p>We want the largest number of people to know about these events ahead of time, that means not just relying on one platform. Instead we aim to advertise our meetups on all channels available to us to get as diverse an audience as possible.</p>
<h3 id="A-lot-of-people-don’t-turn-up"><a href="#A-lot-of-people-don’t-turn-up" class="headerlink" title="A lot of people don’t turn up"></a>A lot of people don’t turn up</h3><p>This is completely expected for a free meetup, but we want to be able to provide food and drink without too much wastage. In our experience actual attendance can vary between 40-70% of the RSVP but we have no concrete formula for estimating.  We presume it depends on the number/quality of speakers and the topic – and perhaps even the weather. Next time we will be more conservative with pizza, but we don’t mind over ordering drinks as they be drunk in our weekly office happy hour!</p>
<h3 id="More-mingling"><a href="#More-mingling" class="headerlink" title="More mingling"></a>More mingling</h3><p>Understandably, attendees can feel too shy to freely interact, which is a real shame as this casual networking is a source of great value of these kinds of meetups. For our next meetups, we will do what we can to get people mixing together, perhaps strategically placing the snacks on offer to bring more people together and avoid having guests sit down by themselves.</p>
<h2 id="Watch-this-Space"><a href="#Watch-this-Space" class="headerlink" title="Watch this Space!"></a>Watch this Space!</h2><p>OpenTable greatly values meetups: As with our Open Source initiatives, we see meetups as part of our commitment to open collaboration and communication within the developer community. We aim to hold many more in the future so watch this space! If you are an event host, please get in touch <a href="https://twitter.com/OpenTableTechUK" target="_blank" rel="external">@OpenTableTechUK</a>. We are very open to suggestions and, provided we have the time and space, more than happy to accommodate.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This June, OpenTable hosted the &lt;a href=&quot;https://www.meetup.com/London-Machine-Learning-Study-Group/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lond
    
    </summary>
    
    
      <category term="OpenTable" scheme="http://tech.opentable.co.uk/blog/categories/OpenTable/"/>
    
      <category term="Culture" scheme="http://tech.opentable.co.uk/blog/categories/Culture/"/>
    
  </entry>
  
  <entry>
    <title>Pragmatic Testing with GraphQL</title>
    <link href="http://tech.opentable.co.uk//blog/2017/06/16/pragmatic-testing-with-graphql/"/>
    <id>http://tech.opentable.co.uk//blog/2017/06/16/pragmatic-testing-with-graphql/</id>
    <published>2017-06-16T15:41:16.000Z</published>
    <updated>2017-06-30T14:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>We’ve been using GraphQL at OpenTable for a little over half a year now.  I won’t go into detail as to why we started using it, but suffice to say, we really enjoyed creating our very first GraphQL endpoint.  It eased a lot of the inconsistencies that we were experiencing with some of our REST-ful services.</p>
<p>This post assumes you have some experience building a GraphQL endpoint.  For those of who you aren’t familiar with it, it feels a lot like having a querying language via an HTTP endpoint.  If you want to try it for yourself, I recommend <a href="https://developer.github.com/v4/explorer/" target="_blank" rel="external">GitHub’s endpoint</a>.  To get started with GraphQL, <a href="http://graphql.org/learn/" target="_blank" rel="external">the official documentation</a> is a perfect place.</p>
<h2 id="The-Problem"><a href="#The-Problem" class="headerlink" title="The Problem"></a>The Problem</h2><p>Now, let’s get back to writing tests for an endpoint.  When we were creating our first endpoint, we started facing regression testing problems while expanding our schema.  It seemed our existing testing methods were ill-equipped to handle it.</p>
<p>Finding a good solution to this is important because I’ve had such a love–hate affair with testing.  All tests are not created equal and a naive developer would say, “write a test in case something changes”.  This certainly isn’t a good measure.  I’ve also found that just attempting to write tests immediately without forethought can be a costly distraction if you grow your codebase.</p>
<h2 id="The-Approach"><a href="#The-Approach" class="headerlink" title="The Approach"></a>The Approach</h2><p>So we took a step back and looked at the code we were writing.  Most of the connectors we wrote were fairly anemic.  We didn’t have much logic for our API nor did we want any.  We could have written unit tests for each parts of the schema but mocking portions of the system seemed more work than it was worth.</p>
<p>So where did we start?  I personally enjoy the outside-in approach and started writing a few acceptance tests. So, we wrote a test for each query in the schema that we had.  It would fire an HTTP request and expect a 200 status code and have no errors in the resulting JSON body.  Thanks to GraphQL most errors are handily reported using this mechanism so we would be able to make a decent impact using little work.</p>
<img src="/images/posts/graphql-base-tests.gif" class="left">
<p>As you can see, we found that this would be good enough at the time but eventually found that it would not scale very well.  If you forget to update one of these queries, you could leave out a major section out accidentally.  Being a big fan of automation, we wondered how we could scale this out.</p>
<h2 id="The-Solution"><a href="#The-Solution" class="headerlink" title="The Solution"></a>The Solution</h2><p>We knew GraphiQL (the web interface for testing GraphQL queries) was using introspection to give us intellisense.  What a great idea: we could leverage introspection in a similar way to discover all the possible queries for a given endpoint.  After doing so, we repeated our previous tests, which was to fire an HTTP request.</p>
<p>So how would you generate queries with parameters?  For example numDice is required for this query:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rollDice(numDice: 4, numSides: 6) &#123;</div><div class="line">	name</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>So, how would we be able to provide a valid parameter to a query that we’ve discovered in this endpoint?  We believe, this is a great opportunity to kill two birds with one stone!  Write an example in your documentation/comments for your query and we’ll re-use it as a test!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">type Query &#123;</div><div class="line">  # RollDice has four examples</div><div class="line">  #</div><div class="line">  # Examples:</div><div class="line">  # rollDice(numDice: 4, numSides: 2)</div><div class="line">  # rollDice( numDice : 40 , numSides:2)</div><div class="line">  # rollDice ( numDice: 2, numSides: 299 )</div><div class="line">  # rollDice (</div><div class="line">  #   numDice:4,</div><div class="line">  #   numSides: 2342</div><div class="line">  # )</div><div class="line">  rollDice(numDice: Int!, numSides: Int): RandomDie</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>From this, all we did is write examples for every single one of our queries and re-run our methodology.</p>
<p>We thought that we wouldn’t be the only ones running into this problem so we decided to open source this tool: <a href="https://github.com/opentable/graphql-query-generator" target="_blank" rel="external">graphql-query-generator</a>.  It can be used as a CLI or a library (if you need more tweaking).  Feel free to give constructive feedback.  Here is a quick demonstration.</p>
<p><img src="/images/posts/graphql-tool-test.gif" alt="Demonstration of GraphQL Testing Tool"></p>
<p>If you’re not seeing the above commands and want to run it for yourself.  Just follow these three steps:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. npm i -g graphql-query-generator</div><div class="line">2. gql-test http://www.example.com/graphql</div><div class="line">3. Have a cup of tea :)</div></pre></td></tr></table></figure>
<p>… And that’s it!  You have a full suite of acceptance tests running against your own GraphQL endpoint!</p>
<p>Please check out: <a href="https://www.npmjs.com/package/graphql-query-generator" target="_blank" rel="external">https://www.npmjs.com/package/graphql-query-generator</a> for more information and updates!</p>
<p>We are always looking for contributors and feedback here: <a href="https://github.com/opentable/graphql-query-generator/issues" target="_blank" rel="external">https://github.com/opentable/graphql-query-generator/issues</a></p>
<p>Finally, if you find it valuable in anyway, perhaps you could throw a star :)</p>
<h5 id="Disclaimer-we-do-have-performance-and-unit-tests-on-top-of-this"><a href="#Disclaimer-we-do-have-performance-and-unit-tests-on-top-of-this" class="headerlink" title="Disclaimer: we do have performance and unit tests on top of this :)"></a>Disclaimer: we do have performance and unit tests on top of this :)</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We’ve been using GraphQL at OpenTable for a little over half a year now.  I won’t go into detail as to why we started using it, but suffi
    
    </summary>
    
    
      <category term="Testing" scheme="http://tech.opentable.co.uk/blog/categories/Testing/"/>
    
      <category term="Engineering" scheme="http://tech.opentable.co.uk/blog/categories/Engineering/"/>
    
      <category term="Acceptance tests" scheme="http://tech.opentable.co.uk/blog/categories/Acceptance-tests/"/>
    
      <category term="API" scheme="http://tech.opentable.co.uk/blog/categories/API/"/>
    
      <category term="GraphQL" scheme="http://tech.opentable.co.uk/blog/categories/GraphQL/"/>
    
  </entry>
  
  <entry>
    <title>OpenTable&#39;s Global Hackathon 2017</title>
    <link href="http://tech.opentable.co.uk//blog/2017/06/01/opentables-global-hackathon-2017/"/>
    <id>http://tech.opentable.co.uk//blog/2017/06/01/opentables-global-hackathon-2017/</id>
    <published>2017-06-01T14:00:00.000Z</published>
    <updated>2017-06-30T15:19:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Last week we were excited to kick-off our first OpenTable Global Hackathon, underway simultaneously in San Francisco, Los Angeles, Mumbai, Melbourne, and right here in London. Having personally never attended a hackathon before let alone helped organise one I was initially daunted, but with some careful planning, good suggestions from the team and a fair amount of making it up as we went along, the end result was quite a success.</p>
<p>This post discusses what format our hackathon took, what challenges we faced in coordinating across countries, the experience in the London office and what we learned.</p>
<h2 id="The-basic-format"><a href="#The-basic-format" class="headerlink" title="The basic format"></a>The basic format</h2><p>The hackathon was conceived in our San Francisco headquarters and could easily have been confined to that one office, but I was delighted to learn is was intended to be a global event from the outset. The basic format, described below, was however optimised for our SF office.</p>
<p>In the weeks leading up to the hackathon, individuals were asked to submit their hack proposals. Idea prompts were circulated such as “engages and delights diners” or “socially connected”, as well as the judging criteria; <strong>Originality</strong>, <strong>Feasibility</strong>, <strong>Likely to adopt</strong>, <strong>Fidelity of prototype</strong>, <strong>Business impact</strong> and <strong>Captivating presentation</strong>.</p>
<p>One week before the hackathon, our San Francisco office held a ‘happy-hour’ in which everyone taking part mingled and discussed ideas.  This social event encouraged the developers, designers and product owners to self-organise into teams and submit their proposals in advance.</p>
<p>The hackathon itself was devised as a 2½ day event, running from Tuesday morning to Thursday lunchtime during normal working hours, with OpenTable providing breakfast and lunch.  Live incidents or outages still had to be fixed, but otherwise the teams would be uninterrupted for the duration.</p>
<p>The hackathon concluded with each team having up to five minutes to present their hack to their colleagues and the judges.  The awards were for the top three hacks, special CEO and CTO’s prizes, and an open vote - and generous cash prizes and gifts were up for grabs.</p>
<h2 id="Tweaks-for-the-London-version-and-building-enthusiasm"><a href="#Tweaks-for-the-London-version-and-building-enthusiasm" class="headerlink" title="Tweaks for the London version and building enthusiasm"></a>Tweaks for the London version and building enthusiasm</h2><p>The big headache in London that we always have to live with is the eight hour time difference between London and San Francisco - and the same constraint obviously existed for the hackathon. Each team concluded that it wouldn’t be feasible to form teams across the offices so all our build-up and actual hacking remained independent. However we submitted our recorded presentations for the final judging along with the rest of the company.</p>
<p>To get our ideas flowing we set up a kick-off session which we called “Beers and Ideas” - half an hour at the end of the Friday preceding the hackathon. Each individual with an idea was asked to pitch it to their colleagues with the intent to recruit team-mates. This format seemed to be popular and rolled seamlessly into our regular Friday office drinks where the ‘recruitment’ could continue.  Some engineers and product managers pitched their ideas even though they couldn’t attend the hackathon itself.</p>
<p>Our design team in SF supplied posters which we put up around the office to raise awareness of the event amongst colleagues and invite them to submit ideas. We were also sent t-shirts that were handed out to the hackers.</p>
<p>One rule we introduced in London was that every hack team had to include someone with which you do not normally work. This was not an arduous stipulation and all teams managed to cross-pollinate with each other.</p>
<p>Just before we started hacking we had a short meeting to finalise the teams and projects. This was the last opportunity for anyone without a team to join an existing team or join forces together. Most people had already made their decisions, but three or four people found their projects at this late stage.</p>
<p>Our London hackathon culminated with a joint session at which we watched each other’s demos.  All teams decided to record in advance rather than giving a live presentation and we gathered to watch these often very funny videos as a group.</p>
<p>Finally, we introduced a “Best Hack in London” award. This bonus, regional award added some drama and tension, preventing an anti-climax at the end of our day - as we had to wait until 1am to hear the global awards live from SF.</p>
<h2 id="How-did-it-go"><a href="#How-did-it-go" class="headerlink" title="How did it go?"></a>How did it go?</h2><p>Overall, the event was a big success.  Five teams in the London office worked on six ideas, and 45 hacks projects were undertaken globally.</p>
<p>This positive outcome was despite a slow start. Having never held a Hackathon at OpenTable before it felt like many people were cautious about how successful it would be.  In the UK we enjoy “20% time” - that is 20% of each sprint for engineers to undertake personal development, prototyping and other non-sprint work to grow themselves or the business - and so for many, a hackathon seemed like it could be just another 20% time, nothing out of the ordinary.</p>
<p>However once we got under way it quickly became apparent that it was much different.  The advance planning, focus and critically the lack of interruptions clearly differentiated this from our typical two days of 20% time.</p>
<p>The teams ranged in size from seven (including product and designers), to a pair of engineers. The work undertaken also ranged from the hugely ambitious ‘moonshots’ that could revolutionise the business, to simpler infrastructure improvements and dashboards relying on the developers’ day-to-day skills and experience.</p>
<p>A handful of people chose not to take part, instead taking the decision to continue with their sprint work. Additionally we had a couple of production issues during the event, but fortunately these only took one or two people from the hackathon for a couple of hours.</p>
<p>Providing the meals was a headache and not something I’d want to do too often!  Pizza on the first day was nice and easy, although they arrived late and one looked like it had been dropped. On the second day we chose a restaurant on Deliveroo, I collected everyone’s order and then couldn’t order online… So I placed the order over the phone and asked one of the team to collect it with the department credit card - but forgot to give them the PIN (and the restaurant forgot to give us the rice, for which I was blamed!). Finally, I managed to order online on day three, but even then it took ages to deliver and what arrived was wrong.  This was undoubtedly the most stressful element of the event and clearly not one of my strengths.</p>
<p>I was also unexpectedly asked to “star” in a hackathon video, “acting” as a restaurateur.  Watching it back was quite cringeworthy - my acting skills are not as strong as I’d thought.</p>
<p>The final presentation of all the hacks was a high-energy,  enjoyable conclusion to the event. Our co-ordinator in SF did a good job lining up 40 back-to-back live presentations to multiple remote offices, but inevitably there were some audiovisual difficulties.  One final disappointment in London was that the winners were not emailed to the global office, meaning many of us excitedly checked our emails upon waking but had to wait much later to find out if they’d won.</p>
<h2 id="What-did-we-learn"><a href="#What-did-we-learn" class="headerlink" title="What did we learn?"></a>What did we learn?</h2><p>From the feedback after the event, everyone felt the event was relevant and helpful for their jobs.  Engineers commented that it gave them experience of what technology to use in certain situations - and what not to use. Another engineer was able to complete a proof of concept that she had been unable to make time for in the sprint.</p>
<p>A number of people have commented that the prizes were too great and the competitiveness skews the engineering value of the event. Whilst we didn’t know the prizes in advance, if they are as substantial next year then I fear there is a risk of people prioritising high-risk, dramatic projects at the expense of experimenting with smaller ideas - ideas that won’t win but can still provide value.  Competitiveness could also tempt people to start projects early, form huge teams and focus more on slick presentations rather than engineering excellence.  This is not necessarily to be avoided, but should be balanced.</p>
<p>It remains to be seen how the company will follow up on the ideas that were worked on in the Hackathon. It would be great to see the time and effort spent built upon to turn some of the ideas into product deliverables, and in London we will try to at least continue some of our technical projects in 20% time.</p>
<p>Another piece of useful feedback was a recommendation to set minimum and maximum team sizes. One of the teams of two in London struggled to balance their responsibilities, and most of the winning teams across the company all seemed to have 7-10 members. Limiting teams to three to six people seems like a good compromise to improve productivity but also level the playing field.</p>
<p>Finally another initiative we wish to try is to coordinate one 20% period per quarter for an unofficial hackathon just in the UK. If we can coordinate with other departments then there is a real appetite to undertake more frequent cross-team, project-based initiatives.  As for the main event itself, I’ve yet to gather feedback from the San Francisco office, but from the London point of view it was a big success and something we hope can become an annual undertaking.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Last week we were excited to kick-off our first OpenTable Global Hackathon, underway simultaneously in San Francisco, Los Angeles, Mumbai
    
    </summary>
    
    
      <category term="Innovation" scheme="http://tech.opentable.co.uk/blog/categories/Innovation/"/>
    
      <category term="OpenTable" scheme="http://tech.opentable.co.uk/blog/categories/OpenTable/"/>
    
      <category term="Culture" scheme="http://tech.opentable.co.uk/blog/categories/Culture/"/>
    
  </entry>
  
  <entry>
    <title>The goal driven organisation</title>
    <link href="http://tech.opentable.co.uk//blog/2017/02/15/the-goal-driven-organisation/"/>
    <id>http://tech.opentable.co.uk//blog/2017/02/15/the-goal-driven-organisation/</id>
    <published>2017-02-15T09:00:00.000Z</published>
    <updated>2017-06-30T14:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Quarterly team goals are an effective way to establish organisational purpose, direction and alignment while supporting team agility. But be vigilant - they can be used inappropriately.</strong></p>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Due to factors such as growth, acquisition, changing markets amongst others, organisations can find themselves in new environments to which they struggle to adapt.</p>
<p>Scaling Agile in these new environments is hard. The practices and tools that are frequently used to solve this problem can give the appearance of acting against team autonomy and agility. Teams and individuals naturally try to protect the engineering culture that they have worked hard to establish but by allowing new organisational needs to go unmet they put their autonomy and agility at risk.</p>
<p>In this post I will show how quarterly goal setting, using Agile principles and with one eye on the dysfunctions that can arise, is an effective way to meet organisational needs while protecting team agility and engineering culture.</p>
<h2 id="What-needs-are-we-trying-to-meet"><a href="#What-needs-are-we-trying-to-meet" class="headerlink" title="What needs are we trying to meet?"></a>What needs are we trying to meet?</h2><p>Senior leaders in an organisation need confidence that the creativity, intelligence, skills and knowledge of their employees are directed most effectively towards delivering long term business objectives. Ensuring that teams are aligned around those business objectives is traditionally called governance.</p>
<p>The top-down command-and-control connotations of that term do not sit comfortably in modern software development and rightly so. The responsibility for organisational alignment should rest with teams and individuals. </p>
<p>A bottom-up approach to organisational alignment relies on transparency. Everyone in the business needs to know the business objectives and what all teams are doing to meet the objectives. Arguably the primary output of all product development and engineering teams is a statement of intent and a narrative of their progress.</p>
<p>Put another way, the first output of all knowledge work is shared, actionable knowledge - we can then decide how best to utilise that knowledge. Teams need to know that the decisions that they are making right now are the right decisions for the business. Without full transparency this is not possible. </p>
<p>In medium to large organisations dependencies between teams are inevitable and I would argue not undesirable. Efforts to structure an organisation and system architecture in such a way that teams are able to work in isolation can reduce friction and time to market.</p>
<p>But at scale this becomes unrealistic without product, technology and knowledge fragmentation. Cross team collaboration can fail and cause unnecessary friction without organisational support and guidance. The ‘improvised collaboration’ that takes place daily and is essential for a business to innovate and succeed needs a framework of ‘scripted collaboration’ so that teams and individuals can assess the impact of requests from and to other teams, and avoid the false sense of urgency that arises without clear direction on the business priorities.</p>
<p>Teams and individuals also need a sense of how their work contributes to the larger whole. A sense of purpose and direction is intrinsically motivating. Similarly team autonomy and the space to make your own decisions are important aspects of any company culture that values its employees and wants to make the most of their talents.</p>
<p>However, they come under threat when a business lacks clear vision and priorities or the vision and priorities are not understood by everyone in the business.</p>
<h3 id="The-learning-organisation"><a href="#The-learning-organisation" class="headerlink" title="The learning organisation"></a>The learning organisation</h3><p>By holding regular retrospectives and fostering a spirit of experimentation and continuous improvement teams have become adept at locking in their learning through process and system improvements. But how does an organisation as a whole achieve this?</p>
<p>If everything is experienced as change then nothing is. We’re just floundering in the zone of chaos. The organisation needs a lightweight means to capture its intent, key decisions, the evolution of plans and actual outcomes. Think of this as a thin slice or low-res snapshot of our current shared understanding. Once captured we can refer to it when evaluating the impact of change. Without this reference the organisation is reactive with little understanding of the impact of its decisions over the medium and long term. </p>
<p>The tool that OpenTable has chosen to achieve organisational alignment, create a sense of purpose and direction and to act as a foundation to support learning is quarterly goals.</p>
<h2 id="Inappropriate-use-of-goals"><a href="#Inappropriate-use-of-goals" class="headerlink" title="Inappropriate use of goals"></a>Inappropriate use of goals</h2><p>As with all tools, quarterly goals can be used inappropriately. Following Agile principles will help ensure that they are of benefit to the team and organisation but there is always scope for misinterpretation, and consequently there are approaches to goal setting that should be avoided.</p>
<h3 id="A-pipeline-of-work"><a href="#A-pipeline-of-work" class="headerlink" title="A pipeline of work"></a>A pipeline of work</h3><p>Goals should not be treated as a pipeline of engineering deliverables that the team are expected to deliver in priority order. Customer and stakeholder value should be the driving factor in defining goals. Simply clearing a backlog of fixed scope work items is an ineffective way to run a business such as OpenTable.</p>
<p>The project pipeline will be familiar to anyone who has spent time at a digital agency or production shop. By delivering a pipeline of work the agency has a guaranteed revenue stream as it is work that clients have agreed to pay for. A business such as OpenTable could successfully deliver a pipeline of work on time and within budget and still go out of business.</p>
<p>We should ask ourselves where do we want to be in three months time and, at this moment, what do we think we will need to do to get there. Contrast this with the approach whereby we select a number of work items from a backlog that we think we will be able to complete in three months. We should favour the first approach over the second.</p>
<p>Avoid thinking of goals as a pipeline of fixed, engineering deliverables.</p>
<h3 id="The-arbitrary-deadline-as-a-means-to-push-teams-to-deliver"><a href="#The-arbitrary-deadline-as-a-means-to-push-teams-to-deliver" class="headerlink" title="The arbitrary deadline as a means to push teams to deliver"></a>The arbitrary deadline as a means to push teams to deliver</h3><p>The three month time horizon for goals is as good an arbitrary period of time as any other. It provides a constraint for thinking beyond the current sprint and considering the medium and longer terms. But we mustn’t lose sight of the fact that it is arbitrary. </p>
<p>We should feel a sense of obligation to our colleagues to meet the commitments that we make to them. If we accept that all models and plans are wrong but are useful and allow us to move forward, then we should be rigorous in doing what we can to invalidate our plans as early as possible, adapt them and share this information with all stakeholders. </p>
<p>Teams should not be pressured into meeting a goal at all costs simply because of the impending end of quarter. We should all agree that the level of effort and duration are important factors in determining business value and prioritisation but driving teams to meet arbitrary deadlines will not help them establish a regular, sustainable pace that is the foundation for reliable forecasting.</p>
<p>Conversely the element of time cannot be ignored and the cost of delay to the business of not having a feature in the hands of customers beyond a certain date is too great.</p>
<p>Avoid treating the end of the quarter as an arbitrary deadline.</p>
<h3 id="A-low-tolerance-for-risk-and-change"><a href="#A-low-tolerance-for-risk-and-change" class="headerlink" title="A low tolerance for risk and change"></a>A low tolerance for risk and change</h3><p>An aligned business should not be rigid to the point that it is inflexible to changing circumstances. If business objectives change, teams should be able to adapt and realign around those new objectives.</p>
<p>What we assumed was important at the beginning of the quarter is very likely to be proven not to be so as the quarter progresses. New information and feedback from stakeholders, development teams and customers may invalidate our assumptions. Fast, frequent feedback and actual outcomes should allow us to adapt our goals and business objectives.</p>
<p>Don’t allow goals to lower our tolerance for risk and change.</p>
<h3 id="Silo-ed-behaviour-and-working-against-collaboration"><a href="#Silo-ed-behaviour-and-working-against-collaboration" class="headerlink" title="Silo-ed behaviour and working against collaboration"></a>Silo-ed behaviour and working against collaboration</h3><p><em>“It’s not in our goals”.</em></p>
<p>Once a team has agreed its goals for the quarter the temptation may be to push back on anything that is considered to fall outside of them. Only so much can be anticipated three months in advance and there will always be new requests and changing priorities.</p>
<p>A business that embraces change should allow for goals and business objectives to change as new information emerges. Requests that originate from outside the team should be considered in light of longer term business objectives and priorities. If this means adapting the team’s plans for the quarter then so be it if it is in the best interests of the business as a whole.</p>
<p>Avoid a team-first mentality.</p>
<h2 id="A-web-of-goals"><a href="#A-web-of-goals" class="headerlink" title="A web of goals"></a>A web of goals</h2><p><em>“How does what I’m doing right now contribute to the success of the business?”</em></p>
<p>This is the question that everyone in the organisation should be able to answer. It should be possible to map each story on a team’s task board to the team goal and from there to the longer term business goals. Longer term business goals can be broken down into shorter term interim goals thereby adding more levels to the hierarchy.</p>
<p>Taken together the business goals are the connecting threads that run through all team goals and provide the context that establishes team and organisational purpose and direction.</p>
<p>Below is an example of a goal hierarchy for the OpenTable Global Traveller initiative:</p>
<pre>
> Global Traveller
    > Create a global habit
        > Global Platform feature parity
            > Add multilingual support to start page features.
</pre>

<p>In this example there are two levels of business goals which are needed to define the context for the value that will be realised from delivering the specific team goal - in this case adding multilingual support.</p>
<p>By following the links up the goal hierarchy and then back down along alternate paths, new connections and opportunities for collaboration that may otherwise go unnoticed are revealed.</p>
<p>Here is another example:</p>
<pre>
> Global Platform
    > Allow diners to book any restaurant on any domain in any language
        > Launch all restaurants from English speaking domains in Australia
            > Enable all English restaurant natural language URLs
            > Enable cross domain search results
        > Allow users to book in any language on OpenTable.com
            > AB test a language switcher on .com
            > Allow users to receive emails in their selected language
</pre>

<p>The highlighted team goals are not dependent on each other but the connections established by the higher level business goals suggest that collaboration and coordination between the teams would be beneficial.</p>
<h2 id="Setting-goals"><a href="#Setting-goals" class="headerlink" title="Setting goals"></a>Setting goals</h2><h3 id="The-team-mission-statement"><a href="#The-team-mission-statement" class="headerlink" title="The team mission statement"></a>The team mission statement</h3><p>When setting goals for the first time a good place to start for any team is to consider its purpose. Why do we exist? A team mission statement can provide a framework for setting goals that have value and meaning to the team and to the business.</p>
<p>As an example, here is a possible mission statement for a team responsible for transactional communications:</p>
<ol>
<li><p>Maintain transactional communications systems in production so that the business has a reliable and performant transactional communications system, and customers receive timely and relevant communications.</p>
</li>
<li><p>Build transactional communications capabilities that increase value for our customers and help the business meet its objectives.</p>
</li>
<li><p>Evolve transactional communications systems in line with the company’s technical vision for the platform to position the business to best meet the evolving needs of its customers.</p>
</li>
<li><p>Foster a supportive and welcoming team culture that values innovation, collaboration and continuous learning.</p>
</li>
</ol>
<p>Quarterly goals can then map back to elements of the mission statement:</p>
<ol>
<li><p>Maintain transactional communications systems in production so that the business has a reliable and performant transactional communications system, and customers receive timely and relevant communications.  <strong>Reduce the level of noise from alerts so that the team can more effectively respond to production incidents.</strong></p>
</li>
<li><p>Build transactional communications capabilities that increase value for our customers and helps the business meet its objectives.  <strong>Launch a thank you email to reinforce the benefits of booking with OpenTable.</strong></p>
</li>
<li><p>Evolve transactional communications systems in line with the company’s technical vision for the platform to position the business to best meet the evolving needs of its customers.  <strong>Migrate transactional communications systems to Apache Mesos.</strong></p>
</li>
<li><p>Foster a supportive and welcoming team culture that values innovation, collaboration and continuous learning.  <strong>Create an engineer on-boarding playbook to ensure that new team members have a great first experience of the team and OpenTable.</strong></p>
</li>
</ol>
<p>Everything that a team does should relate to a team goal and the mission statement. </p>
<p>The thank you email goal example also sits within the web of goals as described above. An example of how it might relate to higher level business objectives is:</p>
<pre>
> Increase the frequency of yearly active bookers
    > Improve the post dining experience
        <span style="font-weight:bold;">> Launch a thank you email to reinforce the benefits of booking with OpenTable.</span>
</pre>


<h3 id="The-anatomy-of-a-goal"><a href="#The-anatomy-of-a-goal" class="headerlink" title="The anatomy of a goal"></a>The anatomy of a goal</h3><ul>
<li><strong>The goal summary</strong> succinctly captures our intent.</li>
<li><strong>The customer and business value</strong> that this goal will unlock. This is the most important element of a goal as it defines why we think it is important.</li>
<li><strong>Key metrics</strong> that will tell us whether the goal has been achieved.</li>
<li><strong>Steps to achieve</strong> includes anything that we think is worth capturing now in terms of discrete aspects of the goal. They can include interim milestones that will give us early feedback on how we’re progressing towards the goal.</li>
</ul>
<h2 id="Reviewing-goals"><a href="#Reviewing-goals" class="headerlink" title="Reviewing goals"></a>Reviewing goals</h2><p>How should teams incorporate goals into their regular planning practices?</p>
<p>Sprint reviews, demos, retrospectives and planning sessions give teams a chance to reflect on and share their progress and collectively agree their next steps. We want to aim to keep the goals process as lightweight as possible and incorporating a regular review of goals into existing agile rituals is preferable. </p>
<p>Fifteen minutes spent reviewing a team’s goals and agreeing changes when needed every other sprint planning session adds an extra dimension to planning, and gives a team more confidence that they are making the right decisions for the coming sprint.</p>
<p>Goals sit alongside a number of other elements that can be incorporated into planning that help establish team situational awareness:</p>
<ul>
<li><strong>goals</strong> provide purpose and direction and are adapted based on outcomes;</li>
<li><strong>workflow metrics</strong> provide insight into what we’ve done and how we’ve done it and suggest improvements that we can make to our processes and practices; and</li>
<li><strong>maps</strong> allow us to navigate a path towards our goals.</li>
</ul>
<p>The data captured by these three elements can then be interpreted and enriched by the team to tell a story about the team’s progress and intent.</p>
<h2 id="The-quarterly-goal-setting-cycle"><a href="#The-quarterly-goal-setting-cycle" class="headerlink" title="The quarterly goal setting cycle"></a>The quarterly goal setting cycle</h2><p>In the same way that the team comes together to reflect and plan on a regular cadence the quarterly goal setting cycle is when the organisation as a whole does the same.</p>
<h3 id="The-roadmap"><a href="#The-roadmap" class="headerlink" title="The roadmap"></a>The roadmap</h3><p>So that everyone in the organisation understands the vision and business objectives the quarterly goal setting process should be kicked off with the business reiterating the medium and long term objectives. A review of progress towards those objectives and any changes that have been made since the last goal setting process should be highlighted and explained. This helps establish a consistent narrative that is essential when attempting to align an organisation towards a shared vision. </p>
<p>Too often a company roadmap is created and presented only to be discarded and forgotten within weeks. The same rigour combined with Agile principles applied to planning at the team level should be applied to the medium and long term business objectives.</p>
<p>As I have shown these are the connecting threads that run through all team goals and establish organisational purpose and context. Left to fray, tangle and rot organisational alignment is impossible.</p>
<p>Once the business objectives have been firmly established teams and individuals are better placed to make the right prioritisation decisions.</p>
<h3 id="Team-dependencies"><a href="#Team-dependencies" class="headerlink" title="Team dependencies"></a>Team dependencies</h3><p>The goal setting process provides the opportunity for the ‘scripted collaboration’ mentioned earlier that is needed to support and protect the daily ‘improvised collaboration’. When teams have agreed the things that they need to do to help the business best meet its objectives, dependencies on other teams should be called out.</p>
<p>Teams can then review all requests for collaboration, discuss with the relevant team and reach a shared understanding of what is expected, how they will work together and the impact on their other goals.</p>
<h3 id="The-problem-of-local-optimisations"><a href="#The-problem-of-local-optimisations" class="headerlink" title="The problem of local optimisations"></a>The problem of local optimisations</h3><p>It is unrealistic to expect members of a team to hold a complete model of the business in their heads which they can refer to when making decisions. Teams need the mental space to be able to focus on the domain and part of the system for which they have direct responsibility.</p>
<p>The downside to this is known as the problem of local optimisations. Over time small decisions made without taking the whole business into account accumulate. We need a means to either anticipate them or to realign on a regular basis. </p>
<p>The quarterly goal setting cycle and the goal reviews give us a means to achieve this. They act as checkpoints to allow the organisation to realign.</p>
<h3 id="The-organisation’s-statement-of-intent"><a href="#The-organisation’s-statement-of-intent" class="headerlink" title="The organisation’s statement of intent"></a>The organisation’s statement of intent</h3><p>Following a final review with senior leadership to validate that the team’s interpretation of the business vision and objectives is aligned; and to make the difficult prioritisation decisions that it has not been possible to reconcile at the team level, the outcome of the goal setting process can be seen as the organisation’s statement of intent.</p>
<p>The artifact that is produced as a result of this process is the sum total of all business objectives, team goals, team dependencies and connections. For full transparency and as a reference point for ongoing decision making and for understanding the impact of change this artifact should be made accessible to everyone in the organisation. </p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Quarterly goal setting establishes the organisational superstructure within which a valued product development and engineering culture can flourish.</p>
<p>We often make the mistake to assume that an approach that values adaptive planning, team autonomy and less top-down control has less rigour and accountability. In fact the opposite is true. Applying Agile principles at scale is hard and relies on skills that may not come naturally to everyone in the business. But done well it results in:</p>
<ul>
<li><strong>more commitment</strong> - to each other and the business;</li>
<li><strong>more accountability</strong> - to each other and the business;</li>
<li><strong>more rigour</strong> - in validating assumptions and making sure we are doing the right thing;</li>
<li><strong>more planning</strong> - done continuously rather than upfront; and</li>
<li><strong>more connection</strong> between individuals, teams and the business vision.</li>
</ul>
<p>And by meeting the needs of senior management and giving them confidence that the energies of everyone in the business are directed most effectively towards business objectives team agility is protected and supported.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Quarterly team goals are an effective way to establish organisational purpose, direction and alignment while supporting team agil
    
    </summary>
    
    
      <category term="Culture" scheme="http://tech.opentable.co.uk/blog/categories/Culture/"/>
    
      <category term="Agile" scheme="http://tech.opentable.co.uk/blog/categories/Agile/"/>
    
      <category term="Goals" scheme="http://tech.opentable.co.uk/blog/categories/Goals/"/>
    
      <category term="Delivery" scheme="http://tech.opentable.co.uk/blog/categories/Delivery/"/>
    
  </entry>
  
  <entry>
    <title>testing-node-apps-with-docker-compose (and some Soul)</title>
    <link href="http://tech.opentable.co.uk//blog/2016/11/18/testing-node-apps-with-docker-compose/"/>
    <id>http://tech.opentable.co.uk//blog/2016/11/18/testing-node-apps-with-docker-compose/</id>
    <published>2016-11-18T16:40:22.000Z</published>
    <updated>2017-06-30T14:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Contents-of-this-post"><a href="#Contents-of-this-post" class="headerlink" title="Contents of this post"></a>Contents of this post</h2><ul>
<li><a href="#purpose">Purpose</a>: the reason for this blog post.</li>
<li><a href="#scenario">Scenario</a>: what this example of using docker-compose can be useful for.</li>
<li><a href="#prerequisites">Prerequisites</a>: basic setup to be able to run the code contained in this post.</li>
<li><a href="#example">Code example</a>: an actual step-by-step guide on how you can setup your test environment to run with docker-compose.</li>
<li><a href="#improvements">Improvements</a>: a couple of ideas on how to expand this technique.</li>
</ul>
<h2 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a><a name="purpose"></a>Purpose</h2><p>As I am sure the audience of this post knows to some extent, <a href="https://www.docker.com/what-docker" target="_blank" rel="external">Docker</a> is a technology that has grown to become popular over the last few years, allowing developers to deploy pieces of software by packaging them into standardized containers, in a number of various ecosystems (Apache Mesos, Amazon Web Services and many more).</p>
<p>So we can use Docker for our deployment needs, awesome. But let’s pay attention to a key word I used above. Docker grants <em>isolation</em>. And what do we like to perform on our application in isolation? Yeah, you guessed right &ndash; testing!</p>
<p>Specifically, with this post, I aim to dig deeper into how to use <a href="https://docs.docker.com/compose/" target="_blank" rel="external">docker-compose</a> (a specific Docker-based tool that enables creation of multi-container Docker applications) to build and run a Node.js application connected to MongoDB, to test their interaction and the interaction of the app with the external world, all inside containers running on your machine. All isolated and testable thanks to the usage of containers that we can spin up, hit with tests, and clean up with little effort. </p>
<p>Interested? Let’s go!</p>
<h2 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a><a name="scenario"></a>Scenario</h2><p>In this scenario we will use Docker and one of its functionalities, docker-compose, to build a container and spin up our app.  Then we build another container with a copy of the database where we can freely create and manipulate data, and finally we perform all the integration testing we want against those self-contained entities, which we can clean up after the tests ran. Total isolation and, very importantly, no need to pollute our development or pre-production environment with superfluous test data.</p>
<p>Let’s imagine an app that we can build and test, for example a directory of soul music artists.</p>
<p>Then let’s scope what our app needs to do, and how to test it. Our purpose is to:</p>
<ul>
<li>Test that when we hit the <code>/</code> path we get a 200 response and a basic home page.</li>
<li>Test that we can post a payload against the <code>/artist</code> path, to create one entry in our database (let’s say the great Marvin Gaye).</li>
<li>Test that when we hit the <code>/artist/marvingaye</code> we get the artist page with its name</li>
</ul>
<h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a><a name="prerequisites"></a>Prerequisites</h2><p>Before diving into the prototype we should make sure everything is setup correctly. Requirements:</p>
<ul>
<li>Node.js v4 and npm</li>
<li><a href="https://docs.docker.com/docker-for-mac/" target="_blank" rel="external">Docker v1.12</a> (assuming you are on OSX you can use Docker For Mac)</li>
<li><a href="https://docs.docker.com/compose/install/" target="_blank" rel="external">Docker Compose</a></li>
<li>The <a href="https://mochajs.org/#installation" target="_blank" rel="external">Mocha</a> testing framework</li>
</ul>
<h2 id="Code-example"><a href="#Code-example" class="headerlink" title="Code example"></a><a name="example"></a>Code example</h2><h3 id="Step-1-Scaffolding"><a href="#Step-1-Scaffolding" class="headerlink" title="Step 1: Scaffolding"></a>Step 1: Scaffolding</h3><p>Let’s build as little as we can without testing.</p>
<p>This first step is not the most crucial one for this blog post’s sake, so I will not delve into it too much. <a href="https://github.com/federicomaffei/soul-compose" target="_blank" rel="external">I have pushed everything into a Github repo</a>, so you will be able to see how the code should look like at each step.</p>
<p>We will use the <a href="http://hapijs.com/" target="_blank" rel="external">hapi.js</a> framework to create a basic server application and <a href="https://github.com/federicomaffei/soul-compose/blob/78400f40606c032fb01542d35e579dc851d82fb3/package.json" target="_blank" rel="external">here is the package.json</a> file of the Soul Compose app with all the dependencies you need to get started. Copy it in your home folder and run:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure>
<p>Now let’s go ahead and create an <a href="https://github.com/federicomaffei/soul-compose/blob/78400f40606c032fb01542d35e579dc851d82fb3/index.js" target="_blank" rel="external">index.js</a> file which will host our server. This is the only thing I will not test, it just comes out of the box with Hapi.js.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Hapi = <span class="built_in">require</span>(<span class="string">'hapi'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> Hapi.Server();</div><div class="line"></div><div class="line">server.connection(&#123;</div><div class="line">    <span class="attr">port</span>: <span class="number">3000</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.start(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="keyword">throw</span> err;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Server running at:'</span>, server.info.uri);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h5 id="Code-example-at-this-point"><a href="#Code-example-at-this-point" class="headerlink" title="Code example at this point."></a><a href="https://github.com/federicomaffei/soul-compose/tree/78400f40606c032fb01542d35e579dc851d82fb3" target="_blank" rel="external">Code example at this point.</a></h5><h3 id="Step-2-Test-the-path"><a href="#Step-2-Test-the-path" class="headerlink" title="Step 2: Test the / path"></a>Step 2: Test the / path</h3><p>Now we can add something interesting: a failing test where we try to hit the / path of the app and expect to get a status code 200 and some text. Let’s write it using Mocha syntax:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">beforeEach(<span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</div><div class="line">    request.get(<span class="string">`http://localhost:3000`</span>, (error, res, b) =&gt; &#123;</div><div class="line">        response = res;</div><div class="line">        body = b;</div><div class="line">        done();</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">it(<span class="string">'returns a 200 and a message'</span>, () =&gt; &#123;</div><div class="line">    expect(response.statusCode).to.equal(<span class="number">200</span>);</div><div class="line">    expect(body).to.equal(<span class="string">'Funky soul singers'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>It obviously fails, because we have no handler for that route and the app is not running. Let’s add a little code to fix this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">server.route(&#123;</div><div class="line">    <span class="attr">method</span>: <span class="string">'GET'</span>,</div><div class="line">    <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">    <span class="attr">handler</span>: <span class="function">(<span class="params">req, reply</span>) =&gt;</span> &#123;</div><div class="line">        reply(<span class="string">'Funky soul singers'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>And then start the app, before running tests again:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm start</div></pre></td></tr></table></figure>
<p>Tests green!</p>
<h5 id="Code-example-at-this-point-1"><a href="#Code-example-at-this-point-1" class="headerlink" title="Code example at this point."></a><a href="https://github.com/federicomaffei/soul-compose/tree/70f945e8e79e7fb62f4dda37cecbd2611f6630ea" target="_blank" rel="external">Code example at this point.</a></h5><h3 id="Step-3-Dockerise-the-app"><a href="#Step-3-Dockerise-the-app" class="headerlink" title="Step 3: Dockerise the app"></a>Step 3: Dockerise the app</h3><p>There is already something we could improve here. We are hitting the ‘real’ app with our request, but this is not what we call isolation, right?</p>
<p>Now is a good time to pull Docker in. We can use docker-compose to build a container with our app that runs on port 3001, nice and separated from our development one. Let’s do it.</p>
<p>All we need to do is create a Dockerfile in the root folder:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FROM node:4-onbuild</div><div class="line">EXPOSE 3000</div><div class="line">ENTRYPOINT [&quot;/usr/local/bin/node&quot;, &quot;index.js&quot;]</div></pre></td></tr></table></figure>
<p>Let’s take a look at what this set of instructions mean. We are building a container with our app, taking the base image from the Node.js official image (the environment where the app will run), exposing the port that the app will use for serving requests, and running the server at last. This, by the way, is a pretty standard way of using a Node.js within Docker.</p>
<p>Now, to spin up the app and hit it with tests, let’s use docker-compose. This will come in useful later, when we will add another container (the database) linked with our app. For now it will run a single container. To do it, all we need to do is create a <a href="https://github.com/federicomaffei/soul-compose/blob/faca99d02178407f3ffa9bfd932bcb8932dfd2e0/docker-compose.yml" target="_blank" rel="external">docker-compose.yml</a> file in our root folder:</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">'2'</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  soul-compose:</span></div><div class="line"><span class="attr">    build:</span></div><div class="line"><span class="attr">      context:</span> <span class="string">.</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"3001:3000"</span></div></pre></td></tr></table></figure>
<p>This is a standard way of adding a service to a docker-compose configuration file. We are declaring that the context of the container is the top folder (where the Dockerfile that will be used to build it lives), and mapping port 3000 of the container to port 3001 of our local environment. This will allow the container to run in parallel with the app running locally, without the risk of having port allocation issues.<br>Now, let’s build and run our one-container composition:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker-compose up -d</div></pre></td></tr></table></figure>
<p>The interesting detail here is the -d option: it basically allows the container to run detached from the command line (in background mode, if you wish). This means we can stay on the same terminal and just run the tests again.</p>
<p>And (making sure we changed our tests to make requests to port 3001) our single test should pass! Now on to bigger things.</p>
<h5 id="Code-example-at-this-point-2"><a href="#Code-example-at-this-point-2" class="headerlink" title="Code example at this point."></a><a href="https://github.com/federicomaffei/soul-compose/tree/faca99d02178407f3ffa9bfd932bcb8932dfd2e0" target="_blank" rel="external">Code example at this point.</a></h5><h3 id="Step-4-New-artist-throw-Mongo-into-the-mix"><a href="#Step-4-New-artist-throw-Mongo-into-the-mix" class="headerlink" title="Step 4: New artist (throw Mongo into the mix)!"></a>Step 4: New artist (throw Mongo into the mix)!</h3><p>So the first acceptance test passes. Now, let’s test a route that allows us to create an entry for a new artist, and test that if we hit an endpoint called <code>/artist</code> with a payload, we get a 200 code from the route. It won’t actually create it for now, but it will give us a path to do the actual creation later.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">beforeEach(<span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> options = &#123;</div><div class="line">        <span class="attr">method</span>: <span class="string">'POST'</span>,</div><div class="line">        <span class="attr">uri</span>: <span class="string">'http://localhost:3001/artist'</span>,</div><div class="line">        <span class="attr">body</span>: &#123; <span class="attr">name</span>: <span class="string">'Marvin Gaye'</span>, <span class="attr">id</span>: <span class="string">'marvingaye'</span> &#125;,</div><div class="line">        <span class="attr">json</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    request(options, (error, res, b) =&gt; &#123;</div><div class="line">        response = res;</div><div class="line">        body = b;</div><div class="line">        done();</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">it(<span class="string">'returns a 200 and a message'</span>, () =&gt; &#123;</div><div class="line">    expect(response.statusCode).to.equal(<span class="number">200</span>);</div><div class="line">    expect(body).to.equal(<span class="string">'Created a soul singer named Marvin Gaye'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Let’s go ahead and make it green, but without actually creating the artist.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">server.route(&#123;</div><div class="line">    <span class="attr">method</span>: <span class="string">'POST'</span>,</div><div class="line">    <span class="attr">path</span>: <span class="string">'/artist'</span>,</div><div class="line">    <span class="attr">handler</span>: <span class="function">(<span class="params">req, reply</span>) =&gt;</span> &#123;</div><div class="line">        reply(<span class="string">`Created a soul singer named <span class="subst">$&#123;req.payload.name&#125;</span>`</span>).code(<span class="number">200</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>In the next test we can dive into the thick of it: let’s say that we now want to get a nice, shiny page for the singer we just created, reading it from a data persistence system (we’ll use MongoDB):</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">beforeEach(<span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</div><div class="line">    request.get(<span class="string">`http://localhost:3001/artist/marvingaye`</span>, (error, res, b) =&gt; &#123;</div><div class="line">        response = res;</div><div class="line">        body = b;</div><div class="line">        done();</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">it(<span class="string">'returns a 200 and an artist page'</span>, () =&gt; &#123;</div><div class="line">    expect(response.statusCode).to.equal(<span class="number">200</span>);</div><div class="line">    expect(body).to.equal(<span class="string">'Marvin Gaye'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>This acceptance test will give me the chance to show how we can hook up another Docker image (<a href="https://hub.docker.com/_/mongo/" target="_blank" rel="external">MongoDB</a>) to docker-compose, and run the test doing a write (the POST) and a read (a GET) from that DB instance.</p>
<p>I am going to add some boilerplate code that serves the purpose of having a connection to the db and perform reads and writes (<a href="https://github.com/federicomaffei/soul-compose/blob/bfe5d89c907cc2dc55acfbd4a763fdc56f9763b8/index.js" target="_blank" rel="external">find it here</a>). The important detail is the fact that now it is actually used in the endpoints we are testing. We are ready to re-run our tests.</p>
<h5 id="Code-example-at-this-point-3"><a href="#Code-example-at-this-point-3" class="headerlink" title="Code example at this point."></a><a href="https://github.com/federicomaffei/soul-compose/tree/bfe5d89c907cc2dc55acfbd4a763fdc56f9763b8" target="_blank" rel="external">Code example at this point.</a></h5><p>The tests will fail, the reason being that our app is unable to connect to the database in its Docker environment at this point. So let’s take advantage of the features of docker-compose, and add a fully-featured MongoDB instance ready to be used, adding it to our <a href="https://github.com/federicomaffei/soul-compose/blob/2962d28e33366a92801f0ef2c18ef3dc7dd9f9db/docker-compose.yml" target="_blank" rel="external">docker-compose.yml</a> file.</p>
<p>Let’s go through the code. First and foremost, we added an entry for the MongoDB image to be built and run:</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">mongodb:</span></div><div class="line"><span class="attr">  image:</span> <span class="attr">mongo:3.0.11</span></div><div class="line"><span class="attr">  ports:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">"27018:27017"</span></div><div class="line"><span class="attr">  command:</span> <span class="bullet">--smallfiles</span></div></pre></td></tr></table></figure>
<p>To make sure that the app and MongoDB load up in the right order (mongo, then app) we can also specify a <em>depends_on</em> property, meaning the app will wait for Mongo to start, and then will be able to access it through the hostname <em>mongodb</em>.</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">soul-compose:</span></div><div class="line"><span class="attr">  build:</span></div><div class="line"><span class="attr">    context:</span> <span class="string">.</span></div><div class="line"><span class="attr">  ports:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">"3001:3000"</span></div><div class="line"><span class="attr">  environment:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">NODE_ENV=test</span></div><div class="line"><span class="attr">  depends_on:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">mongodb</span></div></pre></td></tr></table></figure>
<p>This means we will also have to change the code in the app to take that into account. One way to do it is by exporting an environment variable in the application container using docker-compose (as you can see above), and set the MongoDB hostname depending on it <a href="https://github.com/federicomaffei/soul-compose/blob/2962d28e33366a92801f0ef2c18ef3dc7dd9f9db/index.js" target="_blank" rel="external">in our index.js file</a>. A small but important change.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mongoHost = process.env.NODE_ENV === <span class="string">'test'</span> ? <span class="string">'mongodb'</span> : <span class="string">'localhost'</span>;</div></pre></td></tr></table></figure>
<p>And this covers what we had in scope. You should be able to re-run the tests to watch them going green. Pat yourself on the back!</p>
<h5 id="Code-example-at-this-point-4"><a href="#Code-example-at-this-point-4" class="headerlink" title="Code example at this point."></a><a href="https://github.com/federicomaffei/soul-compose/tree/2962d28e33366a92801f0ef2c18ef3dc7dd9f9db" target="_blank" rel="external">Code example at this point.</a></h5><h2 id="Improvements"><a href="#Improvements" class="headerlink" title="Improvements"></a><a name="improvements"></a>Improvements</h2><p>Let’s wrap up with some improvements we could make to the current state of the application.</p>
<p>An useful exercise would be creating a <a href="https://github.com/federicomaffei/soul-compose/blob/fcb8b653988672f16670c0c65db599b0c8fb2580/scripts/run-tests.sh" target="_blank" rel="external">script file</a> to perform all the commands to build the docker-compose images, run the tests, and perform a <a href="https://github.com/federicomaffei/soul-compose/blob/master/scripts/run-tests.sh#L10" target="_blank" rel="external">cleanup of the test images and containers</a>.</p>
<p>And then slightly modify the <em>npm test</em> command in package.json to run the script:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"test": "./scripts/run-tests.sh"</div></pre></td></tr></table></figure>
<h5 id="Code-example-at-this-point-5"><a href="#Code-example-at-this-point-5" class="headerlink" title="Code example at this point."></a><a href="https://github.com/federicomaffei/soul-compose/tree/fcb8b653988672f16670c0c65db599b0c8fb2580" target="_blank" rel="external">Code example at this point.</a></h5><p>Other ideas for improvement:</p>
<ul>
<li><p>Modify the Node.js Dockerfile to use suggested <a href="https://github.com/nodejs/docker-node/blob/master/docs/BestPractices.md" target="_blank" rel="external">best practices</a>.</p>
</li>
<li><p>Pull in more dependencies your app might have into the docker-compose.yml, like <a href="https://hub.docker.com/_/redis/" target="_blank" rel="external">Redis</a>.</p>
</li>
<li><p>Change from using the <em>onbuild</em> Node.js image to a more customized Dockerfile that does not run npm install at every build but <a href="http://bitjudo.com/blog/2014/03/13/building-efficient-dockerfiles-node-dot-js/" target="_blank" rel="external">instead caches modules</a> if the <em>package.json</em> file has not changed, dramatically reducing execution time of the tests.</p>
</li>
</ul>
<p>Thanks for reading!</p>
<hr>
<p>Thanks to <a href="https://twitter.com/stefanoric" target="_blank" rel="external">Stefano Ricciardi</a> for the proof-reading and feedback.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Contents-of-this-post&quot;&gt;&lt;a href=&quot;#Contents-of-this-post&quot; class=&quot;headerlink&quot; title=&quot;Contents of this post&quot;&gt;&lt;/a&gt;Contents of this post&lt;/
    
    </summary>
    
    
      <category term="Docker" scheme="http://tech.opentable.co.uk/blog/categories/Docker/"/>
    
      <category term="Node-js" scheme="http://tech.opentable.co.uk/blog/categories/Node-js/"/>
    
      <category term="TDD" scheme="http://tech.opentable.co.uk/blog/categories/TDD/"/>
    
      <category term="Compose" scheme="http://tech.opentable.co.uk/blog/categories/Compose/"/>
    
  </entry>
  
  <entry>
    <title>falcor-postman</title>
    <link href="http://tech.opentable.co.uk//blog/2016/11/09/falcor-postman/"/>
    <id>http://tech.opentable.co.uk//blog/2016/11/09/falcor-postman/</id>
    <published>2016-11-09T16:40:22.000Z</published>
    <updated>2017-06-30T14:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>At OpenTable, we have an engineering culture that empowers us to research, experiment and learn. </p>
<p>In an effort to foster innovation and to try new ideas, <a href="/blog/authors/ccartlidge.html">Chris Cartlidge</a>, <a href="https://twitter.com/nickbalestra" target="_blank" rel="external">Nick Balestra</a>, <a href="https://twitter.com/tpgmartin" target="_blank" rel="external">Tom Martin</a> and <a href="/blog/authors/mrichetto.html">myself</a> started to work on a side project nicknamed big-mars. Our project is a mobile-first, responsive web application that uses Falcor by Netflix.</p>
<p>Falcor, a JavaScript library for efficient data fetching, is an implementation of the Backend for Frontend (BFF) or the API Gateway pattern.</p>
<p>One powerful concept that Falcor has is its query model, in which you access your data as if it was a single JSON model in memory.  You can navigate your data structure the way you would navigate a JSON object; either with a “dot notation” (e.g. restaurant.address.city) or with an “array notation” (e.g. restaurant[‘address’][‘city’]). </p>
<p>Really easy and intuitive.</p>
<p>However, while experimenting and learning how to properly use its query model, we noticed that it was quite hard to “visualise” the expected result from the API calls without using, for instance, our beloved in-browser Developer Tools console.</p>
<h2 id="falcor-postman"><a href="#falcor-postman" class="headerlink" title="falcor-postman"></a>falcor-postman</h2><p>The Falcor project released many additional packages in order to facilitate developers who are willing to use this technology (e.g. falcor-express) but in this ecosystem we noticed a lack of tools with a GUI on top.</p>
<p>We also noticed that the GraphQL, another project that shares with Falcor the same core concepts, has tools with visual interfaces (e.g. express-graphql and GraphiQL).</p>
<p>So as a spin-off of our big-mars project, Nick and I decided to build a tool with a nice and intuitive GUI responsible for exercising the Falcor endpoint in order to help us to validate our queries, and we named this tool <a href="https://github.com/opentable/falcor-postman" target="_blank" rel="external">falcor-postman</a>.</p>
<p>So we decided to build falcor-postman as an Express.js middleware, making it easy to plug into an existing Falcor project that uses Express.js as a web application framework. We are releasing it as an Open Source Software project so that others can take advantage of it and hopefully speed up their own development lifecycle.</p>
<h2 id="The-features"><a href="#The-features" class="headerlink" title="The features"></a>The features</h2><p>When plugged into an existing Express.js application it will be possible to access a specific configurable route, showing a web page in which you can write Falcor queries and send them to your Falcor endpoint. Then the result of the query will be presented.</p>
<p>It will be also possible to resend previous queries and modify them, as they will be saved for you into your browser’s local storage.</p>
<img src="/images/posts/falcor-postman.png" class="center">
<h2 id="Under-the-hood"><a href="#Under-the-hood" class="headerlink" title="Under the hood"></a>Under the hood</h2><p>Falcor-postman is composed by an Express.js middleware responsible for serving the UI which is a React.js application. Webpack is our module bundler. We take advantage of hot reloading in development mode while for the production release we create a physical file containing the bundle.</p>
<p>In addition we are using <a href="http://purecss.io" target="_blank" rel="external">Pure.css</a> and <a href="https://codemirror.net" target="_blank" rel="external">Codemirror</a> that are helping us with the UI, and we are also using eslint-config-opentable (another OpenTable open source project) as our .eslintrc config.</p>
<h2 id="What’s-next"><a href="#What’s-next" class="headerlink" title="What’s next?"></a>What’s next?</h2><p>falcor-postman v2.0.0 has just been released on npm and we’re awaiting feedback. Also, we have some issues in our GitHub repository which we will use to build our own product roadmap.</p>
<p>In the short term we would like to fix some outstanding minor issues that we are aware of (polishing the UI, enhancing the query history) but in the long term we would also like to enable data update; at the moment, our middleware only enables fetches but we’d like to better reflect the full functionality of Falcor, which allows for updates as well.</p>
<h2 id="One-final-comment"><a href="#One-final-comment" class="headerlink" title="One final comment"></a>One final comment</h2><p>At OpenTable we love OSS and we truly believe that sharing knowledge and experiences is one of the best ways for learning and growing as engineers. We highly encourage you to reach out to us if you would like to discuss your experience with us or simply would like to understand better what we do.</p>
<h2 id="Links-and-resources"><a href="#Links-and-resources" class="headerlink" title="Links and resources"></a>Links and resources</h2><ul>
<li><a href="https://github.com/opentable/falcor-postman" target="_blank" rel="external">falcor-postman GitHub repository</a></li>
<li><a href="https://netflix.github.io/falcor/" target="_blank" rel="external">Falcor website</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;At OpenTable, we have an engineering culture that empowers us to research, experiment and learn. &lt;/p&gt;
&lt;p&gt;In an effort to foster innovatio
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://tech.opentable.co.uk/blog/categories/JavaScript/"/>
    
      <category term="OSS" scheme="http://tech.opentable.co.uk/blog/categories/OSS/"/>
    
      <category term="Falcor" scheme="http://tech.opentable.co.uk/blog/categories/Falcor/"/>
    
  </entry>
  
  <entry>
    <title>OpenComponents - microservices in the front-end world</title>
    <link href="http://tech.opentable.co.uk//blog/2016/04/27/opencomponents-microservices-in-the-front-end-world/"/>
    <id>http://tech.opentable.co.uk//blog/2016/04/27/opencomponents-microservices-in-the-front-end-world/</id>
    <published>2016-04-27T11:10:00.000Z</published>
    <updated>2017-06-30T14:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Many engineers work every day on opentable.com from our offices located in Europe, America, and Asia, pushing changes to production multiple times a day. Usually, this is very hard to achieve, in fact it took years for us to get to this point. <a href="/blog/2015/02/09/dismantling-the-monolith-microsites-at-opentable/">I described in a previous article</a> how we dismantled our monolith in favour of a Microsites architecture. Since the publication of that blog post we have been working on something I believe to be quite unique, called <strong>OpenComponents</strong>.</p>
<h3 id="Another-front-end-framework"><a href="#Another-front-end-framework" class="headerlink" title="Another front-end framework?"></a>Another front-end framework?</h3><p>OpenComponents is a system to facilitate code sharing, reduce dependencies, and easily approach new features and experiments from the back-end to the front-end. To achieve this, it is based on the concept of using services as interfaces - enabling pages to render partial content that is located, executed and deployed independently.</p>
<p>OpenComponents is not <em>another SPA JS framework</em>; it is a set of conventions, patterns and tools to develop and quickly deploy fragments of front-end. In this perspective, it plays nicely with any existing architecture and framework in terms of front-end and back-end. Its purpose is to <strong>serve as delivery mechanism for a more modularised end-result in the front-end</strong>.</p>
<p>OC is been in production for more than a year at OpenTable and it is <a href="https://github.com/opentable/oc" target="_blank" rel="external">fully open-sourced</a>.</p>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>OpenComponents involves two parts:</p>
<ul>
<li>The <strong>consumers</strong> are web pages that need fragments of HTML for rendering partial contents. Sometimes they need some content during server-side rendering, somethings when executing code in the browser.</li>
<li>The <strong>components</strong> are small units of isomorphic code mainly consisting of HTML, Javascript and CSS. They can optionally contain some logic, allowing a server-side Node.js closure to compose a model that is used to render the view. When rendered they are pieces of HTML, ready to be injected in any web page.</li>
</ul>
<p>The framework consists of three parts:</p>
<ul>
<li>The <strong>cli</strong> allows developers to create, develop, test, and publish components.</li>
<li>The <strong>library</strong> is where the components are stored after the publishing. When components depend on static resources (such as images, CSS files, etc.) these are stored, during packaging and publishing, in a publicly-exposed part of the library that serves as a CDN.</li>
<li>The <strong>registry</strong> is a REST API that is used to consume components. It is the entity that handles the traffic between the library and the consumers.</li>
</ul>
<p>In the following example, you can see how a web page looks like when including both a server-side rendered component (<em>header</em>) and client-side (still) unrendered component (<em>advert</em>):</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">oc-component</span> <span class="attr">href</span>=<span class="string">"//oc-registry.com/header/1.X.X"</span> <span class="attr">data-rendered</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"//cdn.com/oc/header/1.2.3/img/logo.png"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">oc-component</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>page content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">oc-component</span> <span class="attr">href</span>=<span class="string">"//oc-registry.com/advert/~1.3.5/?type=bottom"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">oc-component</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//oc-registry/oc-client/client.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h3><p>The only prerequisite for creating a component is Node.js:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install -g oc</div><div class="line">$ mkdir components &amp;&amp; <span class="built_in">cd</span> components</div><div class="line">$ oc init my-component</div></pre></td></tr></table></figure>
<p>Components are folders containing the following files:</p>
<table style="margin-bottom:16px;"><br>    <tr><br>        <th style="font-weight:bold;padding:5px 10px;border-bottom:1px solid #ccc;">File</th><br>        <th style="font-weight:bold;padding:5px 10px;border-bottom:1px solid #ccc;">Description</th><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">package.json</td><br>        <td style="padding:5px 10px;font-weight: inherit;">A common <a href="https://docs.npmjs.com/files/package.json" target="_blank">node’s package.json</a>. An “oc” property contains some additional configuration.</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">view.html</td><br>        <td style="padding:5px 10px;font-weight: inherit;">The view containing the markup. Currently Handlebars and Jade view engines are supported. It can contain some CSS under the &lt;style&gt; tag and client-side Javascript under the &lt;script&gt; tag.</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">server.js (optional)</td><br>        <td style="padding:5px 10px;font-weight: inherit;">If the component has some logic, including consuming services, this is the entity that will produce the view-model to compile the view.</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">static files (optional)</td><br>        <td style="padding:5px 10px;font-weight: inherit;">Images, Javascript, and files that will be referenced in the HTML markup.</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">*</td><br>        <td style="padding:5px 10px;font-weight: inherit;">Any other files that will be useful for the development such as tests, docs, etc.</td><br>    </tr><br></table>

<h2 id="Editing-debugging-testing"><a href="#Editing-debugging-testing" class="headerlink" title="Editing, debugging, testing"></a>Editing, debugging, testing</h2><p>To start a local test registry using a components’ folder as a library with a watcher:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ oc dev . 3030</div></pre></td></tr></table></figure></p>
<p>To see how the component looks like when consuming it:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ oc preview http://localhost:3030/hello-world</div></pre></td></tr></table></figure></p>
<p>As soon as you make changes on the component, you will be able to refresh this page and see how it looks. This an example for a component that handles some minimal logic:</p>

undefined


<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line"><span class="built_in">module</span>.exports.data = <span class="function"><span class="keyword">function</span>(<span class="params">context, callback</span>)</span>&#123;</div><div class="line">  callback(<span class="literal">null</span>, &#123;</div><div class="line">    <span class="attr">name</span>: context.params.name || <span class="string">'John Doe'</span></div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>To test this component, we can curl <code>http://localhost:3030/my-component/?name=Jack</code>.</p>
<h3 id="Publishing-to-a-registry"><a href="#Publishing-to-a-registry" class="headerlink" title="Publishing to a registry"></a>Publishing to a registry</h3><p>You will need an online registry connected to a library. A component with the same name and version cannot already exist on that registry.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># just once we create a link between the current folder and a registry endpoint</span></div><div class="line">$ oc registry add http://my-components-registry.mydomain.com</div><div class="line"></div><div class="line"><span class="comment"># then, ship it</span></div><div class="line">$ oc publish my-component/</div></pre></td></tr></table></figure>
<p>Now, it should be available at <code>http://my-components-registry.mydomain.com/my-component</code>.</p>
<h2 id="Consuming-components"><a href="#Consuming-components" class="headerlink" title="Consuming components"></a>Consuming components</h2><p>From a consumer’s perspective, a component is an HTML fragment. You can render components just on the client-side, just on the server-side, or use the client-side rendering as failover strategy for when the server-side rendering fails (for example because the registry is not responding quickly or it is down).</p>
<p>You don’t need Node.js to consume components on the server-side. The registry can provide rendered components so that you can consume them using any tech stack.</p>
<p>When published, components are immutable and semantic versioned. The registry allows consumers to get any version of the component: the latest patch, or minor version, etc. For instance, <code>http://registry.com/component</code> serves the latest version, and <code>http://registry.com/component/^1.2.5</code> serves the most recent major version for v1.</p>
<h3 id="Client-side-rendering"><a href="#Client-side-rendering" class="headerlink" title="Client-side rendering"></a>Client-side rendering</h3><p>To make this happen, a components’ registry has to be publicly available.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">oc-component</span> <span class="attr">href</span>=<span class="string">"//my-components-registry.mydomain.com/hello-world/1.X.X"</span>&gt;</span><span class="tag">&lt;/<span class="name">oc-component</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//my-components-registry.mydomain.com/oc-client/client.js"</span> /&gt;</span><span class="undefined"></span></div></pre></td></tr></table></figure></p>
<h3 id="Server-side-rendering"><a href="#Server-side-rendering" class="headerlink" title="Server-side rendering"></a>Server-side rendering</h3><p>You can get rendered components via the registry REST API.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">curl http://my-components-registry.mydomain.com/hello-world</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="string">"href"</span>: <span class="string">"https://my-components-registry.mydomain.com/hello-world"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"requestVersion"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"html"</span>: <span class="string">"&lt;oc-component href=\"https://my-components-registry.mydomain.com/hello-world\" data-hash=\"cad2a9671257d5033d2abfd739b1660993021d02\" data-name=\"hello-world\" data-rendered=\"true\" data-version=\"1.0.13\"&gt;Hello John doe!&lt;/oc-component&gt;"</span>,</div><div class="line">  <span class="string">"type"</span>: <span class="string">"oc-component"</span>,</div><div class="line">  <span class="string">"renderMode"</span>: <span class="string">"rendered"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Nevertheless, for improving caching and response size, when doing browser rendering, or using the <code>node.js</code> client or any language capable of executing server-side Javascript the request will look more like:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> curl http://my-components-registry.mydomain.com/hello-world/~1.0.0 -H Accept:application/vnd.oc.unrendered+json</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="string">"href"</span>: <span class="string">"https://my-components-registry.mydomain.com/hello-world/~1.0.0"</span>,</div><div class="line">  <span class="string">"name"</span>: <span class="string">"hello-world"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"requestVersion"</span>: <span class="string">"~1.0.0"</span>,</div><div class="line">  <span class="string">"data"</span>: &#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"John doe"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"template"</span>: &#123;</div><div class="line">    <span class="string">"src"</span>: <span class="string">"https://s3.amazonaws.com/your-s3-bucket/components/hello-world/1.0.0/template.js"</span>,</div><div class="line">    <span class="string">"type"</span>: <span class="string">"handlebars"</span>,</div><div class="line">    <span class="string">"key"</span>: <span class="string">"cad2a9671257d5033d2abfd739b1660993021d02"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"type"</span>: <span class="string">"oc-component"</span>,</div><div class="line">  <span class="string">"renderMode"</span>: <span class="string">"unrendered"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Making a similar request it is possible to get the compiled view’s url + the view-model as data. This is useful for caching the compiled view (taking advantage of components’ immutability).</p>
<h2 id="Setup-a-registry"><a href="#Setup-a-registry" class="headerlink" title="Setup a registry"></a>Setup a registry</h2><p>The registry is a Node.js Express app that serves the components. It just needs an S3 account to be used as library.</p>
<p>First, create a dir and install OC:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mkdir oc-registry &amp;&amp; <span class="built_in">cd</span> oc-registry</div><div class="line">$ npm init</div><div class="line">$ npm install oc --save</div><div class="line">$ touch index.js</div></pre></td></tr></table></figure></p>
<p>This is how <code>index.js</code> will look like:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oc = <span class="built_in">require</span>(<span class="string">'oc'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> configuration = &#123;</div><div class="line">  <span class="attr">verbosity</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">baseUrl</span>: <span class="string">'https://my-components-registry.mydomain.com/'</span>,</div><div class="line">  <span class="attr">port</span>: <span class="number">3000</span>,</div><div class="line">  <span class="attr">tempDir</span>: <span class="string">'./temp/'</span>,</div><div class="line">  <span class="attr">refreshInterval</span>: <span class="number">600</span>,</div><div class="line">  <span class="attr">pollingInterval</span>: <span class="number">5</span>,</div><div class="line">  <span class="attr">s3</span>: &#123;</div><div class="line">    <span class="attr">key</span>: <span class="string">'your-s3-key'</span>,</div><div class="line">    <span class="attr">secret</span>: <span class="string">'your-s3-secret'</span>,</div><div class="line">    <span class="attr">bucket</span>: <span class="string">'your-s3-bucket'</span>,</div><div class="line">    <span class="attr">region</span>: <span class="string">'your-s3-region'</span>,</div><div class="line">    <span class="attr">path</span>: <span class="string">'//s3.amazonaws.com/your-s3-bucket/'</span>,</div><div class="line">    <span class="attr">componentsDir</span>: <span class="string">'components'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">env</span>: &#123; <span class="attr">name</span>: <span class="string">'production'</span> &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> registry = <span class="keyword">new</span> oc.Registry(configuration);</div><div class="line"></div><div class="line">registry.start(<span class="function"><span class="keyword">function</span>(<span class="params">err, app</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(err)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Registry not started: '</span>, err);</div><div class="line">    process.exit(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h2><p>After more than a year in production, OC is still evolving. These are some of the most powerful features:</p>
<ul>
<li>It <strong>enables developers to create and publish components very easily</strong>. None of the operations need any infrastructural work as the framework takes care, when packaging, of making each component <em>production-ready</em>.</li>
<li>It is <strong>framework agnostic</strong>. Microsites written in <em>C#</em>, <em>Node</em> and <em>Ruby</em> consume components on the server-side via the API. In the front-end, it is great for delivering neutral pieces of HTML but works well for Angular components and React views too.</li>
<li>It enables <strong>granular ownership</strong>. Many teams can own components and they all are discoverable via the same service.</li>
<li>Isomorphism is good for <strong>performance</strong>. It enables consumers to render things on the server-side when needed (mobile apps, SEO) and defer to the client-side contents that are not required on the first load (third-party widgets, adverts, SPA fragments).</li>
<li>Isomorphism is good for <strong>robustness</strong>. When something is going bad on the server-side (the registry is erroring or slow) it is possible to use client-side rendering as a fail-over mechanism. The Node.js client does this by default.</li>
<li>It is a good approach for <strong>experimentation</strong>. People can work closely to the business to create widgets that are capable of both getting data from back-end services and deliver them via rich UIs. We very often had teams that were able to create and instrument tests created via OC in less then 24 hours.</li>
<li>Semver and auto-generated documentation <strong>enforce clear contracts</strong>. Consumers can pick the version they want and component owners can keep clear what the contract is.</li>
<li>A more componentised front-end leads to write <strong>more easily destroyable code</strong>. As opposite of writing highly maintainable code, this approach promotes small iterations on very small, easily readable and testable units of code. In this perspective, recreating something from scratch is perfectly acceptable and recommended, as there is almost zero cost for a developer to start a new project and the infrastructure in place makes maintainance and deprecation as easy as a couple of clicks. </li>
</ul>
<p>If you wish to try or know more about OpenComponents, visit <a href="https://github.com/opentable/oc" target="_blank" rel="external">OC’s github page</a> or have a look at <a href="https://github.com/matteofigus/oc-components-examples" target="_blank" rel="external">some component examples</a>. If you would give us some feedback, asks us question, or contribute to the project get in touch via the <a href="https://gitter.im/opentable/oc" target="_blank" rel="external">gitter chat</a> or via <a href="mailto:oc@opentable.com" target="_blank" rel="external">e-mail</a>. We would love to hear your thoughts about this project.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Many engineers work every day on opentable.com from our offices located in Europe, America, and Asia, pushing changes to production multi
    
    </summary>
    
    
      <category term="SOA" scheme="http://tech.opentable.co.uk/blog/categories/SOA/"/>
    
      <category term="Microsites" scheme="http://tech.opentable.co.uk/blog/categories/Microsites/"/>
    
      <category term="Microservices" scheme="http://tech.opentable.co.uk/blog/categories/Microservices/"/>
    
      <category term="OpenComponents" scheme="http://tech.opentable.co.uk/blog/categories/OpenComponents/"/>
    
      <category term="OC" scheme="http://tech.opentable.co.uk/blog/categories/OC/"/>
    
  </entry>
  
  <entry>
    <title>Testing React Components</title>
    <link href="http://tech.opentable.co.uk//blog/2016/01/07/react-testing/"/>
    <id>http://tech.opentable.co.uk//blog/2016/01/07/react-testing/</id>
    <published>2016-01-07T11:00:00.000Z</published>
    <updated>2017-06-30T14:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>At OpenTable it’s becoming an increasingly popular trend to use <em><a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a></em>.<br>One of the reasons for this is the ability for it  to server-side render whilst still<br>giving us the client side flexibility that we all crave!</p>
<p>We all know to have stable, reliable software you need to have well written tests. Facebook knows this and<br>provides the handy <em><a href="https://facebook.github.io/react/docs/test-utils.html" target="_blank" rel="external">Test Utilities</a></em> library to make<br>our lives easier.</p>
<p>Cool — I hear you all say! But what is the best approach to testing React components?</p>
<p>Well unfortunately this is something that is not very well documented and if not approached in<br>the correct way can lead to brittle tests.</p>
<p>Therefore I have written this blog post to discuss the different approaches we have available to us.</p>
<p>All code used in this post is avaliable on my <em><a href="https://github.com/chriscartlidge/React-Testing-Blog-Code" target="_blank" rel="external">GitHub</a></em>.</p>
<h2 id="The-Basics"><a href="#The-Basics" class="headerlink" title="The Basics"></a>The Basics</h2><p>To make our lives a lot easier when writing test it’s best to use a couple of basic tools. Below is<br>the absolute minimum required to start testing React components.</p>
<ul>
<li><em><a href="https://mochajs.org/" target="_blank" rel="external">Mocha</a></em> - This is a testing framework that runs in the browser or Node.JS (others are available).</li>
<li><em><a href="https://facebook.github.io/react/docs/test-utils.html" target="_blank" rel="external">ReactTestUtils</a></em> - This is the basic testing framework that Facebook provides to go testing with React.</li>
</ul>
<h2 id="The-Scenario"><a href="#The-Scenario" class="headerlink" title="The Scenario"></a>The Scenario</h2><p>We have a landing page broken down into two separate components:</p>
<ul>
<li>Container - The holding container for all sub-components.</li>
<li>Menu Bar - Contains the site navigation and is always displayed.</li>
</ul>
<p><img src="/images/posts/react-comp.png" alt="react-comp"></p>
<p>Each React component is self-contained and should be tested in isolation.</p>
<p>For the purpose of this exercise we will focus on the test for the container component and<br>making sure that the menu bar is displayed within it.</p>
<h2 id="Approach-1-Full-DOM"><a href="#Approach-1-Full-DOM" class="headerlink" title="Approach 1 (Full DOM):"></a>Approach 1 (Full DOM):</h2><p>I like to call this the “Full DOM” approach because you take a component and render it in its entirety<br>including all of its children. The React syntax are transformed and any assertion<br>you make will be against the rendered HTML elements.</p>
<p>Below is our test scenario written in this approach.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react/addons'</span>;</div><div class="line">...</div><div class="line">import jsdom <span class="keyword">from</span> <span class="string">'jsdom'</span>;</div><div class="line"></div><div class="line">global.document = jsdom.jsdom(<span class="string">'&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;'</span>);</div><div class="line">global.window = <span class="built_in">document</span>.parentWindow;</div><div class="line"></div><div class="line">describe(<span class="string">'Container'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  it(<span class="string">'Show the menu bar'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> container = TestUtils.renderIntoDocument(<span class="xml"><span class="tag">&lt;<span class="name">Container</span> /&gt;</span>);</span></div><div class="line"></div><div class="line">    let result = TestUtils.scryRenderedDOMComponentsWithClass(container,</div><div class="line">      'menu-bar-container');</div><div class="line"></div><div class="line">    assert.lengthOf(result, 1);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p>If you run the above test it passes but how does it work?</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> jsdom <span class="keyword">from</span> <span class="string">'jsdom'</span>;</div><div class="line"></div><div class="line">global.document = jsdom.jsdom(<span class="string">'&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;'</span>);</div><div class="line">global.window = <span class="built_in">document</span>.parentWindow;</div></pre></td></tr></table></figure>
<p>This sets up our DOM which is a requirement of <em><a href="https://facebook.github.io/react/docs/test-utils.html#renderintodocument" target="_blank" rel="external">TestUtils.renderIntoDocument</a></em>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> container = TestUtils.renderIntoDocument(<span class="xml"><span class="tag">&lt;<span class="name">Container</span> /&gt;</span>);</span></div></pre></td></tr></table></figure>
<p><em><a href="https://facebook.github.io/react/docs/test-utils.html#renderintodocument" target="_blank" rel="external">TestUtils.renderIntoDocument</a></em> then takes the React syntax and renders it into the DOM as HTML.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> result = TestUtils.scryRenderedDOMComponentsWithClass(container, <span class="string">'menu-bar-container'</span>);</div></pre></td></tr></table></figure></p>
<p>We now query the DOM for a unique class that is contained within the menu-bar and get an array of<br>DOM elements back which we can assert against.</p>
<p>The example above is a common approach but is it necessarily the best way?</p>
<p>From my point of view no, as this approach makes our tests brittle. We are exposing and querying on the inner workings<br>of the menu-bar and if someone was to refactor it and remove/rename the “menu-bar-container” class then our test would fail.</p>
<h2 id="Approach-2-Shallow-Rendering"><a href="#Approach-2-Shallow-Rendering" class="headerlink" title="Approach 2 (Shallow Rendering):"></a>Approach 2 (Shallow Rendering):</h2><p>With the release of React 0.13 Facebook provided the ability to “shallow render” a component.<br>This allows you to instantiate a component and get the result of its render function, a ReactElement, without a DOM.<br>It also only renders the component one level deep so you can keep your tests more focused.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; addons &#125; <span class="keyword">from</span> <span class="string">'react/addons'</span>;</div><div class="line"><span class="keyword">import</span> Container <span class="keyword">from</span> <span class="string">'../../src/Container'</span>;</div><div class="line"><span class="keyword">import</span> MenuBar <span class="keyword">from</span> <span class="string">'../../src/MenuBar'</span>;</div><div class="line"></div><div class="line">describe(<span class="string">'Container'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> shallowRenderer = React.addons.TestUtils.createRenderer();</div><div class="line"></div><div class="line">  it(<span class="string">'Show the menu bar'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    shallowRenderer.render(<span class="xml"><span class="tag">&lt;<span class="name">Container</span>/&gt;</span></span>);</div><div class="line">    <span class="keyword">let</span> result = shallowRenderer.getRenderOutput();</div><div class="line"></div><div class="line">    assert.deepEqual(result.props.children, [</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">MenuBar</span> /&gt;</span></span></div><div class="line">    ]);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Again like the previous example this passes but how does it work?</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> shallowRenderer = React.addons.TestUtils.createRenderer();</div></pre></td></tr></table></figure>
<p>We first create the <em><a href="https://facebook.github.io/react/docs/test-utils.html#shallow-rendering" target="_blank" rel="external">shallowRender</a></em> which handles the rendering of the React components.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">shallowRenderer.render(<span class="xml"><span class="tag">&lt;<span class="name">Container</span>/&gt;</span></span>);</div></pre></td></tr></table></figure>
<p>Then we pass in the component we have under test to the <em><a href="https://facebook.github.io/react/docs/test-utils.html#shallow-rendering" target="_blank" rel="external">shallowRender</a></em>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> result = shallowRenderer.getRenderOutput();</div><div class="line">assert.deepEqual(result.props.children, [<span class="xml"><span class="tag">&lt;<span class="name">MenuBar</span>/&gt;</span></span>]);</div></pre></td></tr></table></figure>
<p>And finally we get the output from the <em><a href="https://facebook.github.io/react/docs/test-utils.html#shallow-rendering" target="_blank" rel="external">shallowRender</a></em> and<br>assert that the children contain the menu-bar component.</p>
<p>Is this approach any better than the previous? In my option yes and for the following reasons:</p>
<ul>
<li><p>We don’t rely on the inner workings of the menu-bar to know if it has been rendered and therefore the markup can be refactored without<br>any of the<br>tests being broken.</p>
</li>
<li><p>Less dependencies are being used as <em><a href="https://facebook.github.io/react/docs/test-utils.html#shallow-rendering" target="_blank" rel="external">shallowRender</a></em> does not require<br>a DOM to render into.</p>
</li>
<li><p>It’s a lot easier to see what is being asserted as we are able to use JSX syntax in assertions.</p>
</li>
</ul>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>So is shallow rendering the silver bullet for React testing? Probably not as it still lacking on key feature for me when dealing<br>with large components and that is the ability to easily query the ReactDOM (libraries like <em><a href="https://github.com/airbnb/enzyme" target="_blank" rel="external">enzyme</a></em><br>are working towards improving this). But it is still a lot better than rendering the component out into HTML and coupling your tests<br>to the inner components of others.</p>
<p>In this blog post we have just scratched the surface of testing with React and I hope it’s food for thought when writing your next set of<br>React tests.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;At OpenTable it’s becoming an increasingly popular trend to use &lt;em&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;exte
    
    </summary>
    
    
      <category term="Testing" scheme="http://tech.opentable.co.uk/blog/categories/Testing/"/>
    
      <category term="JavaScript" scheme="http://tech.opentable.co.uk/blog/categories/JavaScript/"/>
    
      <category term="React" scheme="http://tech.opentable.co.uk/blog/categories/React/"/>
    
  </entry>
  
  <entry>
    <title>Puppet-Community</title>
    <link href="http://tech.opentable.co.uk//blog/2015/05/06/puppet-community/"/>
    <id>http://tech.opentable.co.uk//blog/2015/05/06/puppet-community/</id>
    <published>2015-05-06T09:00:00.000Z</published>
    <updated>2017-06-30T14:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Puppet is an important tool to us at OpenTable; we couldn’t operate as efficiently without it but Puppet is more than a tool or a vendor, it is a community of people trying to help<br>each other operate increasing complex and sophisticated infrastructures.</p>
<p>The Puppet community and the open source efforts that drive that community have always been important to us which is why we want to take a step further in our efforts and introduce<br>you to the “Puppet-community” project.</p>
<h2 id="What-is-Puppet-community"><a href="#What-is-Puppet-community" class="headerlink" title="What is Puppet-community"></a>What is Puppet-community</h2><p>Puppet-community is a GitHub organisation of like-minded individuals from across the wider Puppet ecosystem and from a diverse set of companies. Its principle aims are to allow the community to synchronise its efforts and to provide a GitHub organisation and Puppet Forge namespace not affiliated with any company.</p>
<p>Its wider aims are to provide a place for module and tool authors to share their code and the burden of maintaining it.</p>
<p>I would like to say that this was our idea, as it’s an excellent one, but actually all credit goes to its founders: <a href="https://github.com/igalic" target="_blank" rel="external">Igor Galić</a>, <a href="https://github.com/daenney" target="_blank" rel="external">Daniele Sluijters</a> and <a href="https://github.com/nibalizer" target="_blank" rel="external">Spencer Krum</a></p>
<h2 id="Why-communities-matter"><a href="#Why-communities-matter" class="headerlink" title="Why communities matter"></a>Why communities matter</h2><p>So why all the fuss about this? Why does it even matter where your code lives?</p>
<p>Well these are the some questions that I asked myself when I first heard about this project at PuppetConf 2014. The answer is that is really does matter and it’s a pattern that is<br>developing elsewhere (see: <a href="https://github.com/packer-community" target="_blank" rel="external">packer-community</a>, <a href="https://github.com/terraform-community-modules" target="_blank" rel="external">terraform-community-modules</a>,<br><a href="https://github.com/cloudfoundry-community" target="_blank" rel="external">cloudfoundry-community</a>) to deal with the problems you’ll face with a large amount of open source code.</p>
<p>Stepping back slightly, if you look at open source then there are three types: product-based (think open-core), corporate/individual sponsored,  and community-driven.</p>
<p>The first is common for businesses (like PuppetLabs) who’s product is a open source product. They make great efforts to build a community, fix bugs and accept changes. They make  their money through extras (add-ons and/or professional services). They control what they will/won’t accept and are driven by the need to build that community as well as support those big paying customers who pay the bills - it’s a tough balancing act.</p>
<p>The second is what you probably mean when you think about open source. It’s a individual or company that dumps some code they have been working on to GitHub and that’s it - they own it, they control it, it they don’t like your changes they don’t even have to give a reason. They can also choose to close or delete the project whenever they want or more likely they will just let it sit on GitHub and move onto the next thing.</p>
<p>The third is the community approach. Create a GitHub organisation, move your projects and add some new people in there with commit access. This is a different approach because it means<br>that you don’t own it any more, you don’t have that tight control over the codebase because there are other people with other opinions that you have to take into account. It also means<br>that on long weeks when you’re on-call or on holiday that there is someone else to pick up the slack and merge those pull requests for you. It has massive benefits if you can keep that<br>ego in check.</p>
<h2 id="Why-we’re-moving-our-modules-there"><a href="#Why-we’re-moving-our-modules-there" class="headerlink" title="Why we’re moving our modules there"></a>Why we’re moving our modules there</h2><p>So why is OpenTable moving its modules there? It is because we care about the community (particularly those using Puppet on Windows) and want to make sure there is good long term<br>support for the modules that we authored. OpenTable isn’t a company that authors Puppet modules, it is a company that seats diners in restaurants so from time to time we are going<br>to work on other things.</p>
<p>By being part of the community there will be other people who can help discuss and diagnose bugs, merge pull requests and generally help with any problems that arise when using<br>the modules we created.</p>
<p>Sometimes when writing a module it’s not about being the best, sometimes it’s just about being first - we got a bit lucky. What that means though is that we need to recognise that there<br>are plenty of people out there in the community that have better knowledge than us about a tool or application and might be better suited to guide the project forward - heck we might<br>even learn from them in the process.</p>
<p>So let’s lose our egos, loosen that grip and let those modules be free …</p>
<h2 id="What-that-means-for-you"><a href="#What-that-means-for-you" class="headerlink" title="What that means for you"></a>What that means for you</h2><p>Ok, so let’s get practical for a second. What’s happening here? What our support of Puppet-community means is that our code has moved into a new organisation<br>(<a href="https://github.com/puppet-community" target="_blank" rel="external">github.com/puppet-community</a>) and our modules have been re-released under the community namespace on the forge<br>(<a href="https://forge.puppetlabs.com/puppet" target="_blank" rel="external">forge.puppetlabs.com/puppet</a>). So if you are using our modules then you should go and have a look on the forge and update to the latest versions.<br>We will continue to provide lots of support to these modules but so will lots of others (including some PuppetLabs employees) so expect the quality of the modules to also start increasing.</p>
<p>If you have any thoughts or questions about this you can reach out to me personally on twitter: <a href="twitter.com/liamjbennett">@liamjbennett</a> or via email at: <a href="mailto:liamjbennett@gmail.com" target="_blank" rel="external">liamjbennett@gmail.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Puppet is an important tool to us at OpenTable; we couldn’t operate as efficiently without it but Puppet is more than a tool or a vendor,
    
    </summary>
    
    
      <category term="Puppet" scheme="http://tech.opentable.co.uk/blog/categories/Puppet/"/>
    
      <category term="Puppet-community" scheme="http://tech.opentable.co.uk/blog/categories/Puppet-community/"/>
    
  </entry>
  
  <entry>
    <title>The DNS ABC</title>
    <link href="http://tech.opentable.co.uk//blog/2015/03/05/the-dns-abc/"/>
    <id>http://tech.opentable.co.uk//blog/2015/03/05/the-dns-abc/</id>
    <published>2015-03-05T15:00:00.000Z</published>
    <updated>2017-06-30T14:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction-to-DNS"><a href="#Introduction-to-DNS" class="headerlink" title="Introduction to DNS"></a>Introduction to DNS</h2><p>Before joining OpenTable I was looking for a software engineer job and I’ve done my fair share of interviews. A question that has popped out a lot, and when I say a lot I mean <em>always</em>, is:</p>
<p><em>Could you tell me what happens when I type an URL in a web browser on my computer and press enter?</em></p>
<p>Of course the possible answers could range from “MMMHHH, wellll, I’m not sure where to start…” to a whole book on computer networks.</p>
<p>After a number of attempts to answer briefly and correctly, I’ve concluded that mentioning <strong>DNS</strong> can make a reasonable start.</p>
<p>Let’s think about it. When we type the address of the resource we want to browse, we use the alphabet, right? With letters and names easily readable and retainable by a human being.</p>
<p>But a machine needs an <strong>IP address</strong> to recognize another machine connected to a network. An IP address is numerical, for example 192.168.0.1. Less readable, it seems.</p>
<p>And here is where DNS comes to play. DNS stands for <strong>Domain Name System</strong>, and that represents exactly what it is: a system that translates <strong>domain names</strong> (e.g <em>www.opentable.co.uk</em>), into IP addresses. I think of it as a phone book. It is queried with a domain name and, after a lookup, returns an IP.</p>
<p>How does the magic happen? Let’s look into it.</p>
<h2 id="The-ABC"><a href="#The-ABC" class="headerlink" title="The ABC"></a>The ABC</h2><h3 id="Some-definitions"><a href="#Some-definitions" class="headerlink" title="Some definitions"></a>Some definitions</h3><p>So we can define a domain name as a string composed by one or more parts, called <strong>labels</strong>, concatenated and delimited by dots with a <strong>hierarchical</strong> logic.</p>
<p>In the case of www.opentable.co.uk, for instance, we have four labels:</p>
<ul>
<li><p><em>uk</em> is the <strong>top-level</strong> domain. This should sound familiar. Famous top-level domains are also <em>.net</em>, <em>.org</em>, <em>.uk</em>, <em>.it</em>, <em>.gov</em>, etc.</p>
</li>
<li><p><em>co</em> is the <strong>second level</strong> domain, which in this case specifies the commercial nature of the company.</p>
</li>
<li><p>Hierarchy goes from right to left, so then we can say that <em>opentable</em> is a <strong>subdomain</strong> of <em>co</em>. And so on.</p>
</li>
<li><p>A name that can be associated to a specific machine connected to a network with an IP address is called <strong>hostname</strong>. Let’s say it’s the leftmost label in the domain name.</p>
</li>
</ul>
<h3 id="Questions-that-pop-out-at-this-point"><a href="#Questions-that-pop-out-at-this-point" class="headerlink" title="Questions that pop out at this point"></a>Questions that pop out at this point</h3><p>Q: So all the host names reachable via a specific domain have a specific IP address! There must be BILLIONS of them. How do we make sure everyone is unique?</p>
<p>A: There are entities that have the authority to assign and register names under one or more top-level domain, called <strong>registrars</strong>. The registered name then becomes part of a central database known as the <em>whois database</em>.</p>
<p>Q: Now, how do we retrieve this infamous IP address by just knowing a domain name? Who can <strong>resolve</strong> this request?</p>
<p>A: Well, the domain name is resolved into an IP address by querying <strong>authoritative name servers</strong>. These machines are the endpoints of a database that can map domain names to IPs. The authoritative name servers of the top level domain are also called <a href="https://www.iana.org/domains/root/servers" target="_blank" rel="external"><strong>root level servers</strong></a>.</p>
<p>Q: OK, but wait a second. How in the heavens does my machine know the address of the name server to query? I thought I just entered an address in the browser!</p>
<p>A: Every client machine has a default <strong>DNS resolver</strong>, which is responsible of initiating the sequence of queries that will ultimately lead to the resolution.<br>It is very important to note that the system’s DNS setting can be also overridden by the <a href="http://www.ispreview.co.uk/list.shtml" target="_blank" rel="external"><strong>Internet Service Provider</strong></a> (ISP) settings, so the DNS lookup process can be very OS-specific and ISP-specific. This would deserve a whole post apart.</p>
<h3 id="How-to-resolve-an-address-ideally"><a href="#How-to-resolve-an-address-ideally" class="headerlink" title="How to resolve an address (ideally)"></a>How to resolve an address (ideally)</h3><p>Resolving an address via DNS is also called <strong>lookup</strong>, and it is a recursive process. Now that we know the purpose of DNS, and the concepts involved in the process, we can dig a little deeper into its basic mechanism, which is roughly:</p>
<ol>
<li><p>The resolver has knowledge of the addresses of root name servers, from where the search can start.</p>
</li>
<li><p>The root name server will return a name server which is authoritative for the top-level domain.</p>
</li>
<li><p>This server will give the address of the name server authoritative for the second level domain.</p>
</li>
<li><p>If the hostname is resolved, an IP address is returned. Otherwise step 3) is repeated for all the labels of the domain name in sequence, until a result is reached.</p>
</li>
</ol>
<p>I made a diagram that shows that.</p>
<p><img src="http://federicomaffei.github.io/public/images/dnsbasic.jpg" class="center-image"></p>
<h3 id="Real-life-problems"><a href="#Real-life-problems" class="headerlink" title="Real life problems"></a>Real life problems</h3><p>The mechanism explained above is great, but if applied in a real life application, it will lead to a bottleneck. Every lookup would involve root servers and authoritative servers, which would be hit by gazillions of queries every day, putting a huge burden on the system since the start.</p>
<p>To solve this, of course a <a href="http://blog.catchpoint.com/2014/07/15/world-dns-cache-king/" target="_blank" rel="external"><strong>caching</strong></a> system comes to help. Yes, DNS allows and encourages caching. This way another class of DNS servers comes into play, the <strong>recursive name servers</strong>. They can perform recursive lookups and cache results, returning them when queried even if they don’t have the authority to generate the results themselves.</p>
<p>Caching recursive DNS server are usually managed by Internet Service Providers, and are able to resolve addresses without waiting for the “authorities”. This means that a query will rarely have to hit the root name servers, since there is a very high likelihood that the hostname/IP request is already cached by one of the delegated DNS servers that are called by recursion.</p>
<p>We could say that in reality a root server will be hit as a last resort to track down an authoritative server for a given domain.</p>
<p>The amount of time for which a lookup result is stored on a server is called <a href="http://en.wikipedia.org/wiki/Time_to_live" target="_blank" rel="external"><strong>time-to-live (TTL)</strong></a> and can vary with the configuration.</p>
<p>One side effect of the heavy caching that involves the DNS is that when a new domain is registered, or there is a change in any domain-related settings, there will be a time lag for the propagation of it to all the cached results.</p>
<p>It is noteworthy that cached DNS results from your browsing could be stored in your router, or somewhere within you browser memory as well. These IP addresses seem to be everywhere these days!</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>I barely scratched the surface of the Domain Name System topic, and that alone took a good day of research and writing.</p>
<p>So I decided to avoid making this post too long, so that beginners that are going to find it will profit, and be encouraged to research on these key concepts. This will allow me to decide which part of DNS is worth more digging, and maybe write a sequel. Stay tuned!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introduction-to-DNS&quot;&gt;&lt;a href=&quot;#Introduction-to-DNS&quot; class=&quot;headerlink&quot; title=&quot;Introduction to DNS&quot;&gt;&lt;/a&gt;Introduction to DNS&lt;/h2&gt;&lt;p&gt;Be
    
    </summary>
    
    
      <category term="Engineering" scheme="http://tech.opentable.co.uk/blog/categories/Engineering/"/>
    
      <category term="Theory" scheme="http://tech.opentable.co.uk/blog/categories/Theory/"/>
    
      <category term="DNS" scheme="http://tech.opentable.co.uk/blog/categories/DNS/"/>
    
  </entry>
  
  <entry>
    <title>Hapi.js and SIGTERM</title>
    <link href="http://tech.opentable.co.uk//blog/2015/02/16/hapi-js-and-sigterm/"/>
    <id>http://tech.opentable.co.uk//blog/2015/02/16/hapi-js-and-sigterm/</id>
    <published>2015-02-16T10:32:42.000Z</published>
    <updated>2017-06-30T14:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>When we first stood up our hapi.js APIs, we wrote init scripts to start/stop them. Stopping the server, was simply a case of sending SIGKILL (causing the app to immediately exit).</p>
<p>Whilst this is fine for most cases, if we want our apps to be good Linux citizens, then they should terminate gracefully. Hapi.js has the handy <code>server.stop(...)</code> command (see docs <a href="http://hapijs.com/api#serverstopoptions-callback" target="_blank" rel="external">here</a>) which will terminate the server gracefully. It will cause the server to respond to new connections with a 503 (server unavailable), and wait for existing connections to terminate (up to some specified timeout), before stopping the server and allowing the node.js process to exit. Perfect.</p>
<p>This makes our graceful shutdown code really simple:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">process.on(<span class="string">'SIGTERM'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  server.stop(&#123; <span class="attr">timeout</span>: <span class="number">5</span> * <span class="number">1000</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    process.exit(<span class="number">0</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>When we see a SIGTERM, call <code>server.stop()</code>, then once the server has stopped, call <code>process.exit(0)</code>. Easy peasy.</p>
<h3 id="Throw-a-spanner-in-the-works"><a href="#Throw-a-spanner-in-the-works" class="headerlink" title="Throw a spanner in the works"></a>Throw a spanner in the works</h3><p>Whilst <code>server.stop()</code> is really useful, it has the problem that it immediately prevents the server from responding to new requests. In our case, that isn’t particularly desirable. We use service-discovery, which means that the graceful termination of our app should run like this:</p>
<ul>
<li>SIGTERM</li>
<li>Unannounce from Service-Discovery</li>
<li><code>server.stop(...)</code></li>
<li><code>process.exit(0)</code></li>
</ul>
<p>Ideally we want the unannounce to happen before the server starts rejecting connections, in order to reduce the likelihood that clients will hit a server that is shutting down.</p>
<h3 id="Plugins-to-the-rescue"><a href="#Plugins-to-the-rescue" class="headerlink" title="Plugins to the rescue!"></a>Plugins to the rescue!</h3><p>Thanks to hapi.js’s awesome plugin interface (<a href="http://t.co/GDw44SETfS" target="_blank" rel="external">shameless self promotion</a>), we can do some magic to make the above possible.</p>
<p>I created a really simple plugin called <a href="https://www.npmjs.com/package/hapi-shutdown" target="_blank" rel="external">hapi-shutdown</a> which will handle SIGTERM and then run triggers before calling <code>server.stop(...)</code>.</p>
<p>The idea is that it allows us to run the ‘unannounce’ step, before <code>server.stop(...)</code> is called.</p>
<h3 id="How-to-use-hapi-shutdown"><a href="#How-to-use-hapi-shutdown" class="headerlink" title="How to use hapi-shutdown"></a>How to use hapi-shutdown</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">server.register([</div><div class="line">  &#123;</div><div class="line">    <span class="attr">plugin</span>: <span class="built_in">require</span>(<span class="string">'hapi-shutdown'</span>),</div><div class="line">    <span class="attr">options</span>: &#123;</div><div class="line">      <span class="attr">serverSpindownTime</span>: <span class="number">5000</span> <span class="comment">// the timeout passed to server.stop(...)</span></div><div class="line">    &#125;</div><div class="line">  &#125;],</div><div class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">    server.start(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> </div><div class="line">      server.plugins[<span class="string">'hapi-shutdown'</span>].register(&#123;</div><div class="line">        <span class="attr">taskname</span>: <span class="string">'do stuff'</span>,</div><div class="line">        <span class="attr">task</span>: <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123; </div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'doing stuff before server.stop is called'</span>); </div><div class="line">          done(); </div><div class="line">        &#125;,</div><div class="line">        <span class="attr">timeout</span>: <span class="number">2000</span> <span class="comment">// time to wait before forcibly returning</span></div><div class="line">      &#125;)</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p>The plugin exposes a <code>.register()</code> function which allows you to register your shutdown tasks. The tasks are named (to prevent multiple registrations), and each task must call the <code>done()</code> function. The <code>timeout</code> parameter is provided so that a task which never completes won’t block the shutdown of the server.</p>
<p> Neat, huh?</p>
<h3 id="Hooking-up-unannounce-using-hapi-shutdown"><a href="#Hooking-up-unannounce-using-hapi-shutdown" class="headerlink" title="Hooking up unannounce using hapi-shutdown"></a>Hooking up unannounce using hapi-shutdown</h3><p>We now have a place to register our ‘unannounce’ task. Our service-discovery code is wrapped in another plugin, which means we can use <code>server.dependency(...)</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// inside the plugin's register function</span></div><div class="line"></div><div class="line">server.dependency(<span class="string">'hapi-shutdown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">_, cb</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> err = server.plugins[<span class="string">'hapi-shutdown'</span>].register(&#123;</div><div class="line">    <span class="attr">taskname</span>: <span class="string">'discovery-unannounce'</span>,</div><div class="line">    <span class="attr">task</span>: <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</div><div class="line">      discovery.unannounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        done();</div><div class="line">      &#125;);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">timeout</span>: <span class="number">10</span> * <span class="number">1000</span></div><div class="line">  &#125;);</div><div class="line"> </div><div class="line">  cb(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>server.dependency(...)</code> allows us to specify that this plugin relies on another plugin (or list of plugins). If the dependent plugin is not registered before the server starts, then an exception is thrown.</p>
<p>Handily, <code>server.dependency(...)</code> also takes a callback function, which is invoked after all the dependencies have been registered, which means that you don’t need to worry about ordering inside your <code>server.register(...)</code> code.</p>
<p>This allows our unannounce code to be decoupled from the actual business of shutting down the server.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;When we first stood up our hapi.js APIs, we wrote init scripts to start/stop them. Stopping the server, was simply a case of sending SIGK
    
    </summary>
    
    
      <category term="Microservices" scheme="http://tech.opentable.co.uk/blog/categories/Microservices/"/>
    
      <category term="Hapi.js" scheme="http://tech.opentable.co.uk/blog/categories/Hapi-js/"/>
    
      <category term="SIGTERM" scheme="http://tech.opentable.co.uk/blog/categories/SIGTERM/"/>
    
  </entry>
  
  <entry>
    <title>Dismantling the monolith - Microsites at Opentable</title>
    <link href="http://tech.opentable.co.uk//blog/2015/02/09/dismantling-the-monolith-microsites-at-opentable/"/>
    <id>http://tech.opentable.co.uk//blog/2015/02/09/dismantling-the-monolith-microsites-at-opentable/</id>
    <published>2015-02-09T09:43:03.000Z</published>
    <updated>2017-06-30T14:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>A couple of years ago we started to break-up the code-base behind our consumer site <a href="http://www.opentable.com" target="_blank" rel="external">opentable.com</a>, to smaller units of code, in order to improve our productivity. New teams were created with the goal of splitting up the logic that was powering the back-end and then bring to life new small services. Then, we started working on what we call <em>Microsites</em>.</p>
<h3 id="Microsites"><a href="#Microsites" class="headerlink" title="Microsites"></a>Microsites</h3><p>A microsite is a very small set of web-pages, or even a single one, that takes care of handling a very specific part of the system’s domain logic. Examples are the <em>Search Results</em> page or the <em>Restaurant’s Profile</em> page. Every microsite is an independently deployable unit of code, so it is easier to test, to deploy, and in consequence more resilient. Microsites are then all connected by a front-door service that handles the routing.</p>
<h3 id="Not-a-free-ride"><a href="#Not-a-free-ride" class="headerlink" title="Not a free ride"></a>Not a free ride</h3><p>When we deployed some microsites to production we immediately discovered a lot of pros:</p>
<ul>
<li>Bi-weekly deployments of the monolith became hundreds of deployments every week.</li>
<li>Not anymore a shared codebase for hundreds of engineers. Pull requests accepted, merged, and often deployed on the same day.</li>
<li>Teams experimenting and reiterating faster: product was happy.</li>
<li><em>Diversity</em> on tech stacks: teams were finally able to pick their own favourite web-stack, as soon as they were capable of deploying their code and taking care of it in terms of reliability and performance.</li>
<li>Robustness: when something was wrong with a microsite, everything else was fine.</li>
</ul>
<p>On the other hand, we soon realised that we introduced new problems on the system:</p>
<ul>
<li>Duplication: teams started duplicating a lot of code, specifically front-end components such as the header, the footer, etc.</li>
<li>Coordination: when we needed to change something on the header, for example, we were expecting to see the change live in different time frames, resulting in inconsistencies.</li>
<li>Performance: every microsite was hosting its own duplicated css, javascript libraries, and static resources; resulting as a big disadvantage for the end-user in terms of performance.</li>
</ul>
<h3 id="SRS-aka-Site-Resources-Service"><a href="#SRS-aka-Site-Resources-Service" class="headerlink" title="SRS - aka Site Resources Service"></a>SRS - aka Site Resources Service</h3><p>To solve some of these problems we created a REST api to serve html snippets, that soon we started to call <em>components</em>. Main characteristics of the system are:</p>
<ul>
<li>We have components for shared parts of the website such as the header, the footer, and the adverts. When a change has to go live, we apply the change, we deploy, and we see the change live everywhere.</li>
<li>Output is in HTML format, so the integration is possible if the microsite is either a .NET MVC site or a node.js app.</li>
<li>We have components for the core CSS and the JS common libraries, so that all the microsites use the same resources and the browser can cache them making the navigation smooth.</li>
<li>The service takes care of hosting all the static resources in a separate CDN, so microsites don’t have to host that resources.</li>
</ul>
<p>This is an example of a request to the <em>core</em> css component:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">curl http://srs-sc.otenv.com/v1/com-2014/resource-includes/css</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="string">"href"</span>: <span class="string">"http://srs-sc.otenv.com/v1/com-2014/resource-includes/css"</span>,</div><div class="line">  <span class="string">"html"</span>: <span class="string">"&lt;link rel=\"stylesheet\" href=\"//na-srs.opentable.com/content/static-1.0.1388.0/css-new-min/app.css\" /&gt;&lt;!--[if lte IE 8]&gt;&lt;link rel=\"stylesheet\" href=\"//na-srs.opentable.com/content/static-1.0.1388.0/css-new-min/app_ie8.css\" /&gt; &lt;![endif]--&gt;"</span>,</div><div class="line">  <span class="string">"type"</span>:<span class="string">"css"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The downside of this approach is that there is a strict dependency with SRS for each microsite. On every request, a call to SRS has to be made, so <strong>we had to work hard to guarantee reliability and good performance</strong>.</p>
<h2 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h2><p>When we tried the microsite approach we “traded” some of our code problems with some new cultural problems. We became more agile and we were working in a new different way, with the downside of having the <strong>need to more effectively coordinate more people</strong>. The consequence is that the <strong>way we were approaching the code</strong> evolved over time.</p>
<p>One year later, with the front-end (almost completely) living on micro-sites, and with the help of SRS, we are experimenting more effective ways to be resilient and robust, with the specific goal to allow teams to create their own components and share them with other teams in order to be independent, and use them to easily approach to A/B experiments. </p>
<p>In the next post I’ll write about <a href="https://github.com/opentable/oc" target="_blank" rel="external">OpenComponents</a>, an experimental framework we just open-sourced that is trying to address some of this needs.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A couple of years ago we started to break-up the code-base behind our consumer site &lt;a href=&quot;http://www.opentable.com&quot; target=&quot;_blank&quot; re
    
    </summary>
    
    
      <category term="SOA" scheme="http://tech.opentable.co.uk/blog/categories/SOA/"/>
    
      <category term="Microsites" scheme="http://tech.opentable.co.uk/blog/categories/Microsites/"/>
    
      <category term="Microservices" scheme="http://tech.opentable.co.uk/blog/categories/Microservices/"/>
    
      <category term="Monolith" scheme="http://tech.opentable.co.uk/blog/categories/Monolith/"/>
    
      <category term="OpenComponents" scheme="http://tech.opentable.co.uk/blog/categories/OpenComponents/"/>
    
  </entry>
  
  <entry>
    <title>A Beginner&#39;s guide to REST services</title>
    <link href="http://tech.opentable.co.uk//blog/2015/02/02/a-beginners-guide-to-rest-services/"/>
    <id>http://tech.opentable.co.uk//blog/2015/02/02/a-beginners-guide-to-rest-services/</id>
    <published>2015-02-02T11:53:25.000Z</published>
    <updated>2017-06-30T14:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Why-this-post"><a href="#Why-this-post" class="headerlink" title="Why this post?"></a>Why this post?</h2><p>As a junior, I always find it easier to just sit and write code than actually stop to think about the theoretical basis that lie under the applications I work on. <strong>REST</strong>  is one of those terms I heard a lot about, so I decided to try to sum up what it means and how it affects the choices we make everyday as software engineers.</p>
<h2 id="Introduction-to-REST"><a href="#Introduction-to-REST" class="headerlink" title="Introduction to REST"></a>Introduction to REST</h2><p>REST stands for Representational State Transfer, and it can be defined as an architectural style used to build Web Services that are lightweight, maintainable, and scalable. A service that is designed by REST principles can be called a <strong>RESTful service</strong>.</p>
<p>It has been described first in 2000 by Roy Fielding, in a <a href="http://www.ics.uci.edu/~fielding/pubs/webarch_icse2000.pdf" target="_blank" rel="external">dissertation</a> called “Architectural Styles and the Design of Network-based Software Architectures”. The basic idea was to describe the interactions between the components of a distributed system, putting constraints on them and emphasizing the importance of an uniform interface, that is abstracted from the single components.</p>
<p>REST is often applied to the design and development of web services, which is the scenario I’ll try to address in this post.</p>
<p>The purpose of a web service can be summed up as follows: it exposes <strong>resources</strong> to a <strong>client</strong> so that it can have access to them (examples of typical resources include pictures, video files, web pages and business data).</p>
<p>Common features of a service that is built in a REST style are:</p>
<ul>
<li>Representations</li>
<li>Messages</li>
<li>URIs</li>
<li>Uniform Interface</li>
<li>Statelessness</li>
<li>Links between resources</li>
<li>Caching</li>
</ul>
<h2 id="Representations-what-are-they"><a href="#Representations-what-are-they" class="headerlink" title="Representations - what are they?"></a>Representations - what are they?</h2><p>REST style does not put a constraint into the way resources are represented, as long as their format is understandable by the client.</p>
<p>Good examples of data formats in which a resource could be returned from a service are <a href="http://www.json.org/" target="_blank" rel="external"><strong>JSON</strong></a> (JavaScript Object Notation, which nowadays is the coolest one) and <a href="http://www.w3.org/XML/" target="_blank" rel="external"><strong>XML</strong></a> (Extensible Markup Language, used for more complex data structures). Say for instance a REST service has to expose the data related to a song, with its attributes. A way of doing it in JSON could be:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"ID"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"title"</span>: <span class="string">"(You gotta) Fight for your right (To party)"</span>,</div><div class="line">    <span class="attr">"artist"</span>: <span class="string">"Beastie Boys"</span>,</div><div class="line">    <span class="attr">"album"</span>: <span class="string">"Licensed To Ill"</span>,</div><div class="line">    <span class="attr">"year"</span>: <span class="number">1986</span>,</div><div class="line">    <span class="attr">"genre"</span>: <span class="string">"Hip-Hop"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Easy, huh?</p>
<p>Anyway, a service can represent a resource in a number of ways at the same time, leaving the client to choose which one is better suited for its needs. The important thing is that there is agreement on what format to send/expect.</p>
<p>The format that the client needs will be part of the <strong>request</strong> sent by the client.</p>
<p>The resource will be eventually sent by the service as part of what we call a <strong>response</strong>.</p>
<p>It has to be kept in mind that a resource should be completely described by the representation, since this is the only information the client will have. It has to be exaustive, but without exposing classified or useless information about the entity at the same time.</p>
<h2 id="Messages-A-K-A-client-and-service-chatting"><a href="#Messages-A-K-A-client-and-service-chatting" class="headerlink" title="Messages A.K.A. client and service chatting"></a>Messages A.K.A. client and service chatting</h2><p>Q: So, how exactly do client and service exchange requests and responses?</p>
<p>A: They send messages.</p>
<p>In fact, to be more specific, the client will send an <strong>HTTP request</strong> to the service, specifying the following details:</p>
<ul>
<li>The <strong>method</strong> that is called on the resource. It can correspond to a <em>GET</em>, a <em>POST</em>, a <em>PUT</em>, a <em>DELETE</em>, an <em>OPTIONS</em> or a <em>HEAD</em> operation.</li>
<li>The <strong>URI</strong> of the request. It identifies what is the resource on which the client wants to use the method. More on that later. For now let’s say it is the only way the client knows how to call the needed resource.</li>
<li>The <strong>HTTP version</strong>, which is usually <a href="http://tools.ietf.org/html/rfc2616" target="_blank" rel="external"><em>HTTP/1.1</em></a>.</li>
<li>The <strong>request headers</strong>, which are the additional information passed, with the request, to the service. These fields are basically request modifiers, similar to the parameters sent to a programming language method, and they depend on the type of request sent. More on that later.</li>
<li>The <strong>request body</strong>: is the actual content of a message. In a RESTful service, it’s where the representation of resources sit. A body will not be present in a GET request, for instance, since it is a request to retrieve a resource rather than to create one, whereas a POST request will most likely have one.</li>
</ul>
<p>The request will then generate an <strong>HTTP response</strong> to the client, that will contain the following elements:</p>
<ul>
<li>The <strong>HTTP version</strong>, same as above.</li>
<li>The <strong>response code</strong>: which is a three-digit status code sent back to the client. Can be of the <strong>1xx</strong> format (informational), <strong>2xx</strong> (success), <strong>3xx</strong> (redirect), <strong>4xx</strong> (client error), <strong>5xx</strong> (server error).</li>
<li>The <strong>response header</strong>, which contains metadata and settings related to the message.</li>
<li>The <strong>response body</strong>: contains the representation (if the request was successful).</li>
</ul>
<h2 id="URIs-home-of-the-resources"><a href="#URIs-home-of-the-resources" class="headerlink" title="URIs, home of the resources"></a>URIs, home of the resources</h2><p>A requirement of REST is that each resource has to correspond to an <a href="http://en.wikipedia.org/wiki/Uniform_resource_identifier" target="_blank" rel="external">URI</a> address, which unsurprisingly stands for Uniform Resource Identifier. Having URIs associated to resources is key, because they are the addresses on which the client is allowed to perform the operations on the resources. It is important to stress that according to REST an URI should describe a resource, but never the operation performed on it.</p>
<p>The addresses are usually constructed hierarchically, to allow readability. A typical resource URL could be written as: <code>http://serviceName/resourceName/resourceID</code></p>
<p>Basic guidelines to build well-structured URIs are:</p>
<ul>
<li>Resources should be named with plural nouns, no verbs, using conventions throughout the whole service.</li>
<li>Query URIs <code>http://serviceName/resourceName?id=resourceID</code> should be used only when really necessary. They are not deprecated by REST style, but they are less readable than the normal URIs, and are ignored by search engines. On the upside, they allow the client to send parameters to the service, to refine the request for a specific subset of resources, or resources in a specific format.</li>
</ul>
<h2 id="Uniform-interface-various-operations"><a href="#Uniform-interface-various-operations" class="headerlink" title="Uniform interface, various operations"></a>Uniform interface, various operations</h2><p>Ok, so now that a client knows where a resource is reachable, how is it going to handle the resource? What are the operations that it can perform?</p>
<p>HTTP provides a set of methods that allow the client to perform standard operations on the service:</p>
<table style="margin-bottom:16px;"><br>    <tr><br>        <th style="font-weight:bold;padding:5px 10px;border-bottom:1px solid #ccc;">Method</th><br>        <th style="font-weight:bold;padding:5px 10px;border-bottom:1px solid #ccc;">Operation performed</th><br>        <th style="font-weight:bold;padding:5px 10px;border-bottom:1px solid #ccc;">Quality</th><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">GET</td><br>        <td style="padding:5px 10px;">Read a resource</td><br>        <td style="padding:5px 10px;">Safe</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">POST</td><br>        <td style="padding:5px 10px;">Insert a new resource, or update an existing one</td><br>        <td style="padding:5px 10px;">Not idempotent</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">PUT</td><br>        <td style="padding:5px 10px;">Insert a new resource, or update an existing one</td><br>        <td style="padding:5px 10px;">Idempotent (see below)</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">DELETE</td><br>        <td style="padding:5px 10px;">Delete a resource</td><br>        <td style="padding:5px 10px;">Idempotent</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">OPTIONS</td><br>        <td style="padding:5px 10px;">List allowed operations on a resource</td><br>        <td style="padding:5px 10px;">Safe</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">HEAD</td><br>        <td style="padding:5px 10px;">Return only the response header, no body</td><br>        <td style="padding:5px 10px;">Safe</td><br>    </tr><br></table>

<p>The key difference between <em>POST</em> and <em>PUT</em> is that no matter how many times a <em>PUT</em> operation is performed, the result will be the same (this is what <em>idempotent</em> means), whereas with a <em>POST</em> operation a resource will be added or updated multiple times.</p>
<p>Another difference is that a client that sends a <em>PUT</em> request always need to know the exact URI to operate on, I.E. assigning a name or an ID to a resource. If the client is not able to do so, it has no choice but to use a POST request.</p>
<p>Finally, if the resource already exists, <em>POST</em> and <em>PUT</em> will update it in an identical fashion.</p>
<p>These operations, according to REST, should be available to the client as hyperlinks to the above described URIs, and that is how the client/service interface is constrained to be <em>uniform</em>.</p>
<h2 id="Statelessness-of-the-client-side"><a href="#Statelessness-of-the-client-side" class="headerlink" title="Statelessness of the client side"></a>Statelessness of the client side</h2><p>A RESTful service does not maintain the application state client-side. This only allows the client to perform requests that are resource specific, and does not allow the client to perform operations that assume prior knowledge of past requests. The client only knows what to do based on the ability to read the hypertext it receives, knowing its media type.</p>
<p>This leads me to mention an important constraint of REST, that was also <a href="http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven" target="_blank" rel="external">enforced by Fielding</a> after publishing his dissertation: hyperlinks within hypertext are the only way for the client to make state transitions and perform operations on resources. This constraint is also known as <strong>HATEOAS</strong> (Hypermedia As The Engine Of Application State).</p>
<h2 id="Links-between-resources"><a href="#Links-between-resources" class="headerlink" title="Links between resources"></a>Links between resources</h2><p>In the case of a resource that contains a list of resources, REST suggests to include links to the single resources on the representation, to keep it compact and avoid redundant data.</p>
<h2 id="Caching-to-optimize-time-and-efficiency"><a href="#Caching-to-optimize-time-and-efficiency" class="headerlink" title="Caching to optimize time and efficiency"></a>Caching to optimize time and efficiency</h2><p>Allows to store responses and return them if the same request is performed again. It has to be handled carefully to avoid returning stale results. The headers that allow us to perform controls over caching are:</p>
<table style="margin-bottom:16px;"><br>    <tr><br>        <th style="font-weight:bold;padding:5px 10px;border-bottom:1px solid #ccc;">Header</th><br>        <th style="font-weight:bold;padding:5px 10px;border-bottom:1px solid #ccc;">Application</th><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">Date</td><br>        <td style="padding:5px 10px;">Finding out when this representation was generated</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">Last Modified</td><br>        <td style="padding:5px 10px;">Date and time when the server modified the representation</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">Cache-Control</td><br>        <td style="padding:5px 10px;">HTTP 1.1 header used to control caching, can contain directives</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">Expires</td><br>        <td style="padding:5px 10px;">Expiration date (supports HTTP 1.0)</td><br>    </tr><br>    <tr><br>        <td style="padding:5px 10px;font-weight:bold;">Age</td><br>        <td style="padding:5px 10px;">Duration since the resource was fetched from server</td><br>    </tr><br></table>

<p>Cache-Control values can be tweaked to control if a cached result is still valid or stale. For example, the <em>max-age</em> value indicates for how many seconds from the moment expressed by the Date header a cached result will be valid.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>REST is a language-agnostic style that abstracts over components and allows to build scalable, reusable and relatively lightweight web services. Thinking about it, it seems that REST is very close to an accurate description of the characteristics that made the World Wide Web so popular.</p>
<p>That of course is encouraging developers from all over the world to comply to these very basic ideas, owned by no one but at the same time used by everyone. Fascinating!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Why-this-post&quot;&gt;&lt;a href=&quot;#Why-this-post&quot; class=&quot;headerlink&quot; title=&quot;Why this post?&quot;&gt;&lt;/a&gt;Why this post?&lt;/h2&gt;&lt;p&gt;As a junior, I always fi
    
    </summary>
    
    
      <category term="Engineering" scheme="http://tech.opentable.co.uk/blog/categories/Engineering/"/>
    
      <category term="API" scheme="http://tech.opentable.co.uk/blog/categories/API/"/>
    
      <category term="REST" scheme="http://tech.opentable.co.uk/blog/categories/REST/"/>
    
      <category term="Architecture" scheme="http://tech.opentable.co.uk/blog/categories/Architecture/"/>
    
      <category term="Theory" scheme="http://tech.opentable.co.uk/blog/categories/Theory/"/>
    
  </entry>
  
  <entry>
    <title>On Strongly Typed Logging</title>
    <link href="http://tech.opentable.co.uk//blog/2015/01/23/on-strongly-typed-logging/"/>
    <id>http://tech.opentable.co.uk//blog/2015/01/23/on-strongly-typed-logging/</id>
    <published>2015-01-23T13:13:13.000Z</published>
    <updated>2017-06-30T14:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Logging is a crucial element of monitoring highly available systems. It allows not only to find out about errors but also quickly identify their cause. Logs are often used to generate metrics that help business and engineering make informative decisions on future development directions. </p>
<p>At OpenTable we have a central logging infrastructure, that means all logs are stored in the same shared database (ElasticSearch for us). And everybody can access any logs they want without having very specialized knowledge (thanks Kibana!).</p>
<p>ElasticSearch, though living in a NoSQL world, is not actually a schema-free database. Sure, you do not need to provide schema to it but instead ES will infer schema for you from documents you send to it. This is very similar to type inference you can find in many programming languages. You do not need to specify type of field, but if you later on try to assign inappropriate value to it you will get an exception.</p>
<p>This trait of our database goes all the way to the root of our logging system design. Let me explain why I say that we have ‘strongly typed logs’.</p>
<h2 id="In-The-Beginning-There-Was-String"><a href="#In-The-Beginning-There-Was-String" class="headerlink" title="In The Beginning There Was String"></a>In The Beginning There Was String</h2><p>Before centralization we just logged a single message along with its importance. In code it looked something like:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logger.ERROR(“Kaboom!”)</div></pre></td></tr></table></figure></p>
<p>which resulted in logline on disk having timestamp, severity and message.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;2014-10-10T07:33:04Z [ERROR] Kaboom!&#125;</div></pre></td></tr></table></figure></p>
<p>That worked pretty well. As time passed we often started making log messages more generic to hold relevant data:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logger.INFO(string.Format(“Received &#123;0&#125; from &#123;1&#125;. Status: &#123;2&#125;. Took &#123;3&#125;”, httpMethod, sourceIp, statusCode, durationms));</div></pre></td></tr></table></figure></p>
<p>When we decided to centralize logs we moved the same logs from local disk to a central database. Suddenly things that used to live on single server in a file called ‘application.log’ become part of one huge lump of data. Instead of easing access to logs they were really hard to filter, without even speaking about aggregation, or any simple form of operations to find the source of the problem. ElasticSearch is really good at free text searching, but frankly speaking FTS is never as precise as a good filter.</p>
<h2 id="Then-There-Was-Dictionary-Of-Strings"><a href="#Then-There-Was-Dictionary-Of-Strings" class="headerlink" title="Then There Was Dictionary Of Strings"></a>Then There Was Dictionary Of Strings</h2><p>Wherever there is problem there is also a solution. So we changed the way our logging works. We created a custom logger and started sending logs more like documents than single string.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">customLogger.send(‘info’, new Dictionary&lt;string, string&gt; &#123;</div><div class="line">&#123;‘method’, httpMethod.ToString()&#125;,</div><div class="line">&#123;‘sourceIp’, sourceIp.ToString()&#125;,</div><div class="line">&#123;‘statusCode’, statusCode.ToString()&#125;,</div><div class="line">&#123;‘duration’, durationms.ToString()&#125;,</div><div class="line">&#123;‘requestId’, requestId.ToString()&#125;,</div><div class="line">&#123;‘service’, ‘myservice’&#125;</div><div class="line">&#123;‘message’, string.Format(“Received &#123;0&#125; from &#123;1&#125;. Status: &#123;2&#125;. Took &#123;3&#125;”, httpMethod, sourceIp, statusCode, durationms)&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>That helped a lot.</strong></p>
<p>You might wonder why we serialized everything to string? The answer is ElasticSearch mapping as I described above. Mapping, once it is inferred, cannot be changed. So from time to time we used to have conflicts (e.g. one application logging requestId as number, other as guid). Those conflicts were costly - logs were lost - so we simply applied the simplest solution available and serialized everything.</p>
<p>Now filtering was working fine. We were even able to group requests based on a single field and count them. You cannot imagine how useful it is to simply count the different status codes returned by a service. Also you may have noticed we introduced some extra fields like ‘service’ which helped us group logs coming from a single application. We did the same with hostname etc.</p>
<p>With this easy success our appetite has grown and we wanted to log more. And being lazy programmers we found a way to do it quickly so our logs often included just relevant objects.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">customLogger.log(‘info’, request)</div><div class="line">customLogger.log(‘error’, exception)</div></pre></td></tr></table></figure></p>
<p>Our custom logging library did all the serialization for us. This worked really well. Now we were actually logging whole things that mattered without having to worry about serialization at all. What’s even better, whenever the object in question changed (e.g. a new field was added to request), it was automagically logged.</p>
<p>However one thing was still missing. We really wanted to see performance of our application in real time or do range queries (e.g. “show me all requests that have 5xx status code”). We also were aware that both ES and Kibana can deliver it but our logging is not yet good enough.</p>
<h2 id="Strongly-Typed-Logs"><a href="#Strongly-Typed-Logs" class="headerlink" title="Strongly Typed Logs"></a>Strongly Typed Logs</h2><p>So we looked at our logging and infrastructure and at what needs to be done to allow different types of fields to live in ElasticSearch. And you can imagine that it was a pretty simple fix; we just started using types. Each log format was assigned its own type. This type was then used by ElasticSearch to put different logs into separate buckets with separate mapping. The type is equivalent in meaning to classes in OO programming. If we take this comparison further then each log entry would be an object in OO programming. ElasticSearch supports searches across multiple types, which is very convenient when you don’t know what you are looking for. On the other hand, when you know, you can limit your query to single type and take advantage of fields types.</p>
<p>It was a big application change as we needed to completely change our transport mechanism to LogStash. We started with Gelf and switched to Redis, which allowed us to better control format of our logs. </p>
<p>We also agreed on a first standard. The standard defined that type will consist of three parts:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;serviceName&gt;-&lt;logName&gt;-&lt;version&gt;</div></pre></td></tr></table></figure></p>
<p>This ensures that each team can use any logs they want to (thus serviceName). Each log will have its own format (thus logName). But they can also change in the future (thus version). One little word of caution, ES doesn’t like dots in type name, so don’t use them.</p>
<p>So our logs look now like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">customLogger.log(new RequestLog &#123;</div><div class="line">Request = request,</div><div class="line">Headers = headers,</div><div class="line">Status = status&#125;)</div></pre></td></tr></table></figure></p>
<p>RequestLog is responsible for providing valid type to the logging library.</p>
<p>With sending serialized objects as logs and assigning each class unique type our logs have become strongly typed.</p>
<p>We are already couple steps further down the path of improving our logs. We standardized some common fields and logtypes. That, however, is a completely different tale. ​</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Logging is a crucial element of monitoring highly available systems. It allows not only to find out about errors but also quickly identif
    
    </summary>
    
    
      <category term="Architecture" scheme="http://tech.opentable.co.uk/blog/categories/Architecture/"/>
    
      <category term="ElasticSearch" scheme="http://tech.opentable.co.uk/blog/categories/ElasticSearch/"/>
    
      <category term="Logs" scheme="http://tech.opentable.co.uk/blog/categories/Logs/"/>
    
      <category term="Kibana" scheme="http://tech.opentable.co.uk/blog/categories/Kibana/"/>
    
  </entry>
  
  <entry>
    <title>Building a living styleguide at OpenTable</title>
    <link href="http://tech.opentable.co.uk//blog/2015/01/19/building-a-living-styleguide-at-opentable/"/>
    <id>http://tech.opentable.co.uk//blog/2015/01/19/building-a-living-styleguide-at-opentable/</id>
    <published>2015-01-19T17:00:00.000Z</published>
    <updated>2017-06-30T14:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>If you’re reading this you’ve probably built yourself a website.  A site - large or small - that’s thrown together or crafted over many months.  And if you have, you’ve probably kept all your CSS class names in your head, or at least been able to go straight to the relevant stylesheets to retrieve them.</p>
<p>Well OpenTable is unsurprisingly built by many engineering teams across multiple continents, and was completely redesigned last year.  And as soon as you have more than a handful of people working on your front-end you will quickly find a well-intentioned developer causing one or both of these problems:</p>
<ul>
<li>Well-intentioned developer adds a new submission form but, like the design Philistine he is, his buttons are <span style="font-family:verdana;font-size:18px;color:#E40000;">18px Verdana #E40000</span>, not the correct <span style="font-family:arial;font-size:16px;color:#DA3743;">16px Arial #DA3743</span></li>
<li>Your good old developer knows which font size and colour it should be, but bungs a duplicate class into a random stylesheet (or worse still, inline)</li>
</ul>
<p>Despite these risks, a single front-end dev (or a team of them) cannot check every new piece of code or they will quickly become a bottleneck.</p>
<h3 id="You-need-some-guidelines"><a href="#You-need-some-guidelines" class="headerlink" title="You need some guidelines"></a>You need some guidelines</h3><p>Offline designers regularly create ‘brand guidelines’ or ‘design standards’ to document the precise way their brand or product should be recreated when outside of their control.  Online, such guidelines are similarly invaluable for maintaining brand and code consistency with multiple engineers and designers, but it is blindingly obvious that a printed or ‘static’ set of guidelines is completely unsuitable for a constantly changing website.</p>
<p>Step forward a ‘living’ styleguide.</p>
<p>A living styleguide gives a visual representation of a site’s UI elements using <strong>the exact same code</strong> as on the website, in most cases via the live CSS.  A living styleguide may also provide reusable CSS and HTML code examples and they are not just for engineers new to the code; I frequently use ours at OpenTable and I wrote the stylesheets in the first place (I can’t be expected to remember everything).</p>
<p>Providing reusable code improves collaboration, consistency and standards, and reduces design and development time - but like most documentation it is essential your guide is always up-to-date and trustworthy.  So if a living styleguide is (theoretically) always up-to-date, how did we build ours?</p>
<h2 id="How-we-built-our-styleguide"><a href="#How-we-built-our-styleguide" class="headerlink" title="How we built our styleguide"></a>How we built our styleguide</h2><p>Living styleguides are not new (although they were <a href="http://sideproject.io/an-exhaustive-look-at-the-year-in-web-design/#styleguides" target="_blank" rel="external">one of the trends of 2014</a>) and as such many frameworks have been built over the years.  We chose to use <a href="http://kaleistyleguide.com/" target="_blank" rel="external">Kalei</a> by <a href="https://github.com/thomasdavis" target="_blank" rel="external">Thomas Davis</a> - I forget the exact reasons why but it was probably the easiest at the time to set up and customise.</p>
<p>Generating a Kalei styleguide is as simple as adding comments to your stylesheet; Kalei uses a variety of frameworks, including <a href="http://backbonejs.org/" target="_blank" rel="external">Backbone.js</a>, <a href="http://www.glazman.org/JSCSSP/" target="_blank" rel="external">JSCSSP</a> and <a href="https://github.com/chjj/marked" target="_blank" rel="external">Marked</a> to convert these comments into HTML mark-up, generate a list of your individual stylesheets as navigation and present these as a single page web app.</p>
<p>For example in your <code>buttons.css</code> file it is as simple as adding the following comments:</p>
<pre><code>/*!
# Primary buttons
Primary buttons are only used when there is an exceedingly distinct and clear call-to-action.
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;#&quot; class=&quot;button&quot;&gt;Button&lt;/a&gt;</div><div class="line">&lt;a href=&quot;#&quot; class=&quot;button secondary&quot;&gt;Button secondary&lt;/a&gt;</div><div class="line">&lt;a href=&quot;#&quot; class=&quot;button success&quot;&gt;Button success&lt;/a&gt;</div><div class="line">&lt;a href=&quot;#&quot; class=&quot;button alert&quot;&gt;Button alert&lt;/a&gt;</div></pre></td></tr></table></figure>

*/
</code></pre><p>Which, by using the CSS in the file itself, Kalei would visually render like so:</p>
<p><img src="/images/posts/styleguide-buttons-screenshot.png" alt="styleguide-buttons-screenshot"></p>
<h3 id="Customising-Kalei"><a href="#Customising-Kalei" class="headerlink" title="Customising Kalei"></a>Customising Kalei</h3><p>Kalei works well out-of-the-box but we had to make a few customisations.  These were mostly cosmetic changes, but a fundamental changes was to <strong>add support for Sass</strong>.  For this we wrote a Grunt task imaginatively called <code>grunt styleguide</code> in which we combined <em>Clean</em>, <em>Copy</em>, <em>Scss</em> and <em>Replace</em> tasks.  Unsatisfactorily it took a little while to set up and involved a number of steps, but below is simplification of the process.</p>
<ol>
<li>Clean all CSS files from the styleguide, excluding Kalei specific stylesheets</li>
<li>Copy our partial scss files into a temporary folder and rename them to remove the underscore (partial scss files begin with an underscore are are <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#partials" target="_blank" rel="external">not compiled by default</a>)</li>
<li>Compile the scss files into CSS in the styleguide directory</li>
<li>Copy across dependent fonts and images, using <em>Replace</em> to update the relative paths</li>
<li>Delete the temporary directory</li>
</ol>
<p>This task is run as a deployment step and can be run locally when developing the guide.</p>
<p>Other that a few small UI tweaks we made one significant changes to the look and feel.  By default the navigation lists stylesheets using their full file name, e.g. <strong>breadcrumbs.css</strong> and <strong>buttons.css</strong>.  Using a regex function in the <code>menu.js</code> file and <code>text-transform: capitalize</code> in the Kalei stylesheet we modify the navigation to display the more attractive headings <strong>Breadcrumbs</strong> and <strong>Buttons</strong>.</p>
<p>View our styleguide at <a href="http://www.opentable.com/styleguide" target="_blank">opentable.com/styleguide</a>.</p>
<h2 id="What’s-next"><a href="#What’s-next" class="headerlink" title="What’s next?"></a>What’s next?</h2><p>Our living styleguide is intended to be an organic resource that we will grow and refine into an integral part of our software development.  We have many ideas for how we want to develop the guide - at the very least it is currently incomplete insomuch as we have not documented every one of our stylesheets.</p>
<p>There is also a fundamental weakness to this type of styleguide, which is duplication of code.  Whilst we use the exact same CSS as our live site, we are copying and pasting mark-up into these files and this content can go out of date without deliberate upkeep.  At OpenTable we have a <em>site resource service</em> which serves HTML snippets to different internal microsites so one option could be to use this service to integrate these snippets into the styleguide.  We may also investigate a solution using <a href="http://webcomponents.org/" target="_blank" rel="external">web components</a> as cross-browser support is not a concern.</p>
<p>We are also interested to see whether it would be useful to run UI tests against the styleguide. We have used <a href="http://pdiff.sourceforge.net/" target="_blank" rel="external">pDiff</a> in the past for visual regression on specific microsites, but the styleguide could be an opportunity to catch accidental, global UI changes.  We are going to look at running <a href="https://garris.github.io/BackstopJS/" target="_blank" rel="external">BackstopJS</a> against each section of the guide to see if this increases its usefulness.</p>
<p>Finally, as one of the developers who created the styleguide I want it to be widely adopted across OpenTable. I want designers and engineers to contribute to the code and use it for their day-to-day designing and developing, and I want product owners and marketing folks to use it when creating promotional material and A/B tests.  My ultimate goal is for it to be an integral tool enabling everyone to work faster, avoid duplication and maintain a consistent brand identity.</p>
<h2 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h2><ul>
<li>View an online directory <a href="http://styleguides.io/" target="_blank" rel="external">of styleguide articles and examples</a><!-- - Join us - [apply for our senior front-end engineer role at OpenTable, London.](https://hire.jobvite.com/Jobvite/Job.aspx?b=nlsWXpwA&j=oXeiYfwb) -->
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you’re reading this you’ve probably built yourself a website.  A site - large or small - that’s thrown together or crafted over many m
    
    </summary>
    
    
      <category term="UI" scheme="http://tech.opentable.co.uk/blog/categories/UI/"/>
    
      <category term="Design" scheme="http://tech.opentable.co.uk/blog/categories/Design/"/>
    
      <category term="OpenTable" scheme="http://tech.opentable.co.uk/blog/categories/OpenTable/"/>
    
      <category term="CSS" scheme="http://tech.opentable.co.uk/blog/categories/CSS/"/>
    
      <category term="Styleguide" scheme="http://tech.opentable.co.uk/blog/categories/Styleguide/"/>
    
  </entry>
  
  <entry>
    <title>Explaining Flux architecture with macgyver.js</title>
    <link href="http://tech.opentable.co.uk//blog/2015/01/01/explaining-flux-architecture-with-macgyver-dot-js/"/>
    <id>http://tech.opentable.co.uk//blog/2015/01/01/explaining-flux-architecture-with-macgyver-dot-js/</id>
    <published>2015-01-01T15:33:46.000Z</published>
    <updated>2017-06-30T14:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-Flux"><a href="#What-is-Flux" class="headerlink" title="What is Flux?"></a>What is Flux?</h2><p><a href="https://github.com/facebook/flux" target="_blank" rel="external">Flux</a> is an application architectural pattern developed by Facebook. It was developed to solve some of the complexities of the MVC pattern when used at scale by favouring a uni-directional approach. It is a pattern and not a technology or framework.</p>
<p><img src="/images/posts/mvc-scale.png" alt="MVC scale issue"></p>
<p>When applications that use the model-view-controller (MVC) pattern at any scale it becomes difficult to maintain consistent data across multiple views. In particular the case whereby flow between models and views is not uni-directional and may require increasing logic to maintain parity between views when model data is updated. Facebook hit this issue several times and in particular with their unseen count (an incremented value of unseen messages which is updated by several UI chat components). It wasn’t until they realised that the MVC pattern accomodated the complexity that they stepped back from the problem and addressed the architecture.</p>
<p>Flux is intentionally unidirectional.</p>
<p><img src="/images/posts/flux.png" alt="flux"></p>
<p>Key to this architecture is the dispatcher. The dispatcher forms the gatekeeper that all actions must go through. When a view, or views, wish to do something they fire an action which the dispatcher correctly routes via registered callbacks made by the stores. </p>
<p>Stores are responsible for the data and respond to callbacks from the dispatcher. When data is changed they emit change events that views listen to to notify them that data has changed. The view can then respond accordingly (for example to update/rebind).</p>
<p>This will become more obvious when we go through the macgyver.js example.</p>
<h2 id="What-is-macgyver-js"><a href="#What-is-macgyver-js" class="headerlink" title="What is macgyver.js?"></a>What is macgyver.js?</h2><p><a href="https://github.com/stevejhiggs/macgyver" target="_blank" rel="external">Macgyver</a> is a project fork of <a href="http://mullet.io/" target="_blank" rel="external">mullet.io</a> by <a href="https://github.com/stevejhiggs" target="_blank" rel="external">Steve Higgs</a>. Mullet is an aggregate stack to get started using Node.js with Facebook’s <a href="http://facebook.github.io/react/" target="_blank" rel="external">React</a> framework on the client and Walmart’s <a href="http://walmartlabs.github.io/hapi/" target="_blank" rel="external">hapi.js</a> on the server. </p>
<p>Steve initially swapped out Grunt for Gulp, updated hapi and React and fixed some issues with the React dev tools. I then added another example to incorporate the Flux architecture, which you can see <a href="https://github.com/stevejhiggs/macgyver/tree/master/reactPlusFlux" target="_blank" rel="external">here</a>. As React was also developed by Facebook you can begin to see how flux compliments its design and component based model.</p>
<h2 id="The-macgyver-js-Flux-example"><a href="#The-macgyver-js-Flux-example" class="headerlink" title="The macgyver.js Flux example"></a>The macgyver.js Flux example</h2><p>The demo is a very simple quiz. In true Macgyver style he is faced with abnormally unrealistic situations armed with impossibly useless “every-day” items to escape the situation. If you select the correct tool, you proceed to the next situation.</p>
<img src="/images/posts/structure.png" class="left" width="200">
<p>Let’s start by going through the uni-directional flow above and at the same time look at the code and its structure.</p>
<p>When the game is first loaded the view fires an action to get the next situation. This is then fired off to the dispatcher, as are all actions.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">receiveSituations: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">	AppDispatcher.handleViewAction(&#123;</div><div class="line">   		<span class="attr">actionType</span>: MacgyverConstants.RECEIVE_SITUATIONS_DATA,</div><div class="line">     		<span class="attr">data</span>: data</div><div class="line">   	&#125;);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>The store registers to listen for events from the dispatcher with a registered callback. It has the job of loading the situation data and emitting an event when this data is changed. In this case the SituationStore.js has the job of setting the current situation for the view to render.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">AppDispatcher.register(<span class="function"><span class="keyword">function</span>(<span class="params">payload</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> action = payload.action;</div><div class="line"></div><div class="line">	<span class="keyword">switch</span>(action.actionType) &#123;</div><div class="line">		<span class="keyword">case</span> MacgyverConstants.RECEIVE_SITUATIONS_DATA:</div><div class="line">			loadSituationsData(action.data);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> MacgyverConstants.CHECK_ANSWER:</div><div class="line">			checkAnswer(action.data);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	SituationStore.emitChange();</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>The React view (in this case Game.jsx) registers an event listener for these changes in the SituationStore using the React “componentDidMount” function. When the situation is received by the component it rebinds to the data by loading the sitution and the possible answers.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Game = React.createClass(&#123;</div><div class="line"></div><div class="line">	<span class="attr">componentDidMount</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		SituationStore.addChangeListener(<span class="keyword">this</span>._onChange);</div><div class="line">		ToolStore.addChangeListener(<span class="keyword">this</span>._onChange);</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">componentWillUnmount</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		SituationStore.removeChangeListener(<span class="keyword">this</span>._onChange);</div><div class="line">		ToolStore.removeChangeListener(<span class="keyword">this</span>._onChange);</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">render</span>: ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>When the user selects an answer this fires off another “CHECK_ANSWER” event to the dispatcher. The situation store recieves this event with the answer in the payload and checks whether the answer selected is the correct one. If it is it updates the situation and emits a changes event to which the view receives and rebinds the view to the new situation.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Flux can be quite difficult to fathom eventhough it is quite a simple architectural pattern. In this small example it does initially feel overly complex and indeed it probably is. The pattern was designed to solve issues that occur at large scale in MVC applications due to the increased amound of bi-directional dependencies between views and models. For smaller applications it could be seen as over-engineered, however I really like the simplicity in the uni-directional flow and the assurance that unit tests are almost always going to mimic the state changes possible in your application because of the guarantee of a simple flow of data.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What-is-Flux&quot;&gt;&lt;a href=&quot;#What-is-Flux&quot; class=&quot;headerlink&quot; title=&quot;What is Flux?&quot;&gt;&lt;/a&gt;What is Flux?&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://tech.opentable.co.uk/blog/categories/JavaScript/"/>
    
      <category term="Macgyver" scheme="http://tech.opentable.co.uk/blog/categories/Macgyver/"/>
    
      <category term="Flux" scheme="http://tech.opentable.co.uk/blog/categories/Flux/"/>
    
  </entry>
  
  <entry>
    <title>Supporting IE8 in the OpenTable redesign</title>
    <link href="http://tech.opentable.co.uk//blog/2014/12/08/supporting-ie8-in-the-opentable-redesign/"/>
    <id>http://tech.opentable.co.uk//blog/2014/12/08/supporting-ie8-in-the-opentable-redesign/</id>
    <published>2014-12-08T21:14:57.000Z</published>
    <updated>2017-06-30T14:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>We’re really <a href="http://blog.opentable.com/2014/opentables-website-re-designed-re-architected-re-imagined/" target="_blank" rel="external">proud to have released</a> last week our redesigned <a href="http://www.opentable.co.uk" target="_blank" rel="external">OpenTable</a> site, the culmination of months of hard work from many talented people here in London and in San Francisco.</p>
<p>However despite killing off our old site and its 2004 design, 2.8% of our visitors could have been crying into their keyboard as a far worse opentable.co.uk filled their screen.</p>
<p>That version of OpenTable was our new responsive site viewed in Internet Explorer 8.</p>
<p><img src="/images/posts/redesign-ie8.png" alt="Our redesign before we optimised for IE8"></p>
<p>The fundamental issue is that IE8 doesn’t support media queries so the age-old browser would try to stretch our <em>mobile-first</em> responsive design as wide as it could go - not great across a 27” Thunderbolt.</p>
<p>To solve the problem we first tried the <a href="https://github.com/scottjehl/Respond" target="_blank" rel="external">Respond.js</a> polyfill but this didn’t work as we’d hoped.  The main issue appeared to be that because we serve our CSS and JS on a separate sub-domain we fell foul of the browser’s cross-domain security.  We followed the Respond.js instructions to solve this but having no luck we looked for alternatives.</p>
<h2 id="Legacssy"><a href="#Legacssy" class="headerlink" title="Legacssy"></a>Legacssy</h2><p>Further Googling lead us to <a href="https://github.com/robinpokorny/grunt-legacssy" target="_blank" rel="external">Legacssy</a>. With this Grunt task we could create a IE8-only stylesheet and not have to serve extra JS and cross-domain proxy files to all visitors.</p>
<p>Our existing process is to create our core CSS with an <code>app.scss</code> file and <a href="https://github.com/sindresorhus/grunt-sass" target="_blank" rel="external">grunt-sass</a>.  Our additional step was to create an <code>app_ie8.scss</code> file, parse it with <code>grunt-sass</code> like before, but then also run it through Legacssy.</p>
<h3 id="Our-app-scss-file"><a href="#Our-app-scss-file" class="headerlink" title="Our app.scss file"></a>Our app.scss file</h3><pre><code>@import &apos;normalize&apos;;

@import &apos;components/global&apos;;

@import
  &apos;components/icons&apos;,
  &apos;components/buttons&apos;,
  &apos;components/calendar&apos;,
  &apos;components/forms&apos;,
  &apos;components/pagination&apos;,
  &apos;components/star-rating&apos;;

@import
  &apos;partials/footer&apos;,
  &apos;partials/header&apos;,
  &apos;partials/location-picker&apos;;
</code></pre><h3 id="And-our-app-ie8-scss-file"><a href="#And-our-app-ie8-scss-file" class="headerlink" title="And our app_ie8.scss file"></a>And our app_ie8.scss file</h3><pre><code>@import ‘app&apos;;
@import &apos;browsers/_ie8.scss&apos;;
</code></pre><p>This process left us with a duplicate of the main site CSS that would be IE8 friendly - and as you can see we are also able to merge in an IE8 specific stylesheet with further overrides.  All we now needed to was serve this inside conditional comments after the main stylesheet, and CSS specificity would ensure our IE rules overwrite the media queries.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--[if lte IE 8]&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;//eu-srs.opentable.com/content/static/css/app_ie8.css&quot; /&gt;</div><div class="line">&lt;![endif]—&gt;</div></pre></td></tr></table></figure>
<h2 id="Drawbacks"><a href="#Drawbacks" class="headerlink" title="Drawbacks"></a>Drawbacks</h2><p>We are very happy with this solution as it generates the IE8 fixes as part of our automated build with no extra effort.  The only obvious negative is for the IE8 visitors who will effectively be downloading the same stylesheet twice, but if they are routinely browsing the web with IE8 this could be the least of their worries.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>We’re really proud of our new site; we’re still ironing out some kinks but we hope that it’s good enough for those of you who visit us with Internet Explorer 8 (probably through no fault of your own).</p>
<p>For the record, here a couple of other issues we found which may help other intrepid developers with their IE debugging in 2015 and beyond.</p>
<h3 id="Other-IE8-issues"><a href="#Other-IE8-issues" class="headerlink" title="Other IE8 issues"></a>Other IE8 issues</h3><ul>
<li>The other unsupported CSS values were rem units and RGBA colours.  After running Legacssy we used <a href="https://github.com/robwierzbowski/grunt-pixrem" target="_blank" rel="external">pixrem.js</a> to replace rems with pixels and a custom task to replace RGBA values with their HEX equivalents.</li>
<li>IE11’s F12 developer tools don’t render identically to native IE8. We used Microsoft’s excellent <a href="http://www.modern.ie" target="_blank" rel="external">modern.ie</a> site to download virtual machines with Windows 7 and IE8.</li>
<li>We only tested on Windows 7 as this makes up 66% of our IE8 visitors. The remainder are on different operating systems which collectively only make up 0.95% of our total visitors; this is below our threshold for support.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We’re really &lt;a href=&quot;http://blog.opentable.com/2014/opentables-website-re-designed-re-architected-re-imagined/&quot; target=&quot;_blank&quot; rel=&quot;ext
    
    </summary>
    
    
      <category term="Design" scheme="http://tech.opentable.co.uk/blog/categories/Design/"/>
    
      <category term="OpenTable" scheme="http://tech.opentable.co.uk/blog/categories/OpenTable/"/>
    
      <category term="CSS" scheme="http://tech.opentable.co.uk/blog/categories/CSS/"/>
    
      <category term="Grunt" scheme="http://tech.opentable.co.uk/blog/categories/Grunt/"/>
    
      <category term="Sass" scheme="http://tech.opentable.co.uk/blog/categories/Sass/"/>
    
      <category term="Internet Explorer" scheme="http://tech.opentable.co.uk/blog/categories/Internet-Explorer/"/>
    
  </entry>
  
  <entry>
    <title>Proxying Services With Hapi.js</title>
    <link href="http://tech.opentable.co.uk//blog/2014/11/28/proxying-with-hapi/"/>
    <id>http://tech.opentable.co.uk//blog/2014/11/28/proxying-with-hapi/</id>
    <published>2014-11-28T10:32:42.000Z</published>
    <updated>2017-06-30T14:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve raved in the past about how awesome <a href="http://hapijs.com" target="_blank" rel="external">hapi.js</a> is, but I’m going to talk about just a specific case today.</p>
<p>We started off with just a couple of hapi.js apis. This was at a time when standing up new infrastructure was still a bit painful, so inevitably those apis ended up having more functionality in them than they should have. Now it’s easy for us to get infrastructure, so we want to do more of it.</p>
<p>Our goal is to have lots of small(er) apis that just look after one specific piece (skillfully avoiding using the buzzword ‘microservices’).</p>
<p>When you want to split out functionality from one api to another, it can be a pain, especially if you have a lot of consumers who aren’t particularly fast-moving or communicative. Or maybe you don’t know all your consumers up front.</p>
<p>You’ve got a couple of options here:</p>
<ul>
<li><p>Maintain the functionality in two places and slowly migrate consumers across</p>
</li>
<li><p>Use a proxy or routing layer in-front of the api to rewrite or redirect requests</p>
</li>
<li><p>Write code in your api to proxy requests to a different server</p>
</li>
</ul>
<p>The first two options are pretty icky, and frankly the third isn’t all that great either. It all depends on you having the right framework. Do you see where I’m going here?</p>
<h3 id="Enter-Hapi-js"><a href="#Enter-Hapi-js" class="headerlink" title="Enter Hapi.js"></a>Enter Hapi.js</h3><p>Hapi.js has the concept of a ‘proxy’ handler, which can transparently proxy requests to a different server.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">server.route([</div><div class="line">  &#123;</div><div class="line">    <span class="attr">method</span>: <span class="string">'GET'</span>,</div><div class="line">    <span class="attr">path</span>: <span class="string">'/foo'</span>,</div><div class="line">    <span class="attr">handler</span>: &#123;</div><div class="line">      <span class="attr">proxy</span>: &#123;</div><div class="line">        <span class="attr">host</span>: <span class="string">'my-other-service.mydomain.com'</span>,</div><div class="line">        <span class="attr">port</span>: <span class="number">80</span>,</div><div class="line">        <span class="attr">protocol</span>: <span class="string">'http'</span>,</div><div class="line">        <span class="attr">passThrough</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">xforward</span>: <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">]);</div></pre></td></tr></table></figure>
<p>And boom, you’re done. You can now safely delete <em>all</em> of that code from your api and move it. The <em>only</em> thing you need to have kicking about is that proxy handler code.</p>
<p>The <code>passthrough</code> setting specifies whether or not to preserve headers on the original request, and <code>xforward</code> tells hapi to add (or append) an ‘x-forwarded-for’ header to the request.</p>
<p>The proxy handler is really powerful. It can rewrite the request (using <code>mapUri</code>), pass local-state (from the hapi instance) along, reject unauthorised requests, you can even hook into the response and monkey about with it if you want (using <code>onResponse</code>).</p>
<p>For full details, see the <a href="http://hapijs.com/api/v7.5.2#route-options" target="_blank" rel="external">proxy section</a> of the route options.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve raved in the past about how awesome &lt;a href=&quot;http://hapijs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hapi.js&lt;/a&gt; is, but I’m going to talk
    
    </summary>
    
    
      <category term="Microservices" scheme="http://tech.opentable.co.uk/blog/categories/Microservices/"/>
    
      <category term="Hapi.js" scheme="http://tech.opentable.co.uk/blog/categories/Hapi-js/"/>
    
      <category term="Proxy" scheme="http://tech.opentable.co.uk/blog/categories/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>Hobknob v2.0: A new dimension</title>
    <link href="http://tech.opentable.co.uk//blog/2014/11/26/hobknob-v2-dot-0-a-new-dimension/"/>
    <id>http://tech.opentable.co.uk//blog/2014/11/26/hobknob-v2-dot-0-a-new-dimension/</id>
    <published>2014-11-26T10:11:37.000Z</published>
    <updated>2017-06-30T14:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes there is the requirement for more granularity when toggling a feature switch.<br>Version 2.0 of <a href="https://github.com/opentable/hobknob" target="_blank" rel="external">Hobknob</a> hopes to address this with feature categories.</p>
<h3 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR."></a>TL;DR.</h3><p>Hobknob now allows you to define categories of features that have multiple toggles per feature.</p>
<p>For example, you can define the ‘Domain Features’ category which allows you to toggle a feature OFF in <code>your-website.com</code>, but ON in <code>your-website.co.uk</code>.</p>
<p><img src="/images/posts/hobknob-domain-features.png" alt="Domain Features"></p>
<h2 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h2><p>Feature categories are configured with a few pieces of information. For example:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"categories"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"id"</span>: <span class="number">0</span>,</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"Simple Features"</span>,</div><div class="line">      <span class="attr">"description"</span>: <span class="string">"Use when you want your feature to be either on or off"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"Domain Features"</span>,</div><div class="line">      <span class="attr">"description"</span>: <span class="string">"Use when you want your features to be toggled separately for different domains"</span>,</div><div class="line">      <span class="attr">"values"</span>: [<span class="string">"com"</span>, <span class="string">"couk"</span>, <span class="string">"de"</span>, <span class="string">"commx"</span>, <span class="string">"jp"</span>, <span class="string">"ca"</span>]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"id"</span>: <span class="number">2</span>,</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"Locale Features"</span>,</div><div class="line">      <span class="attr">"description"</span>: <span class="string">"Use when you want your features to be toggled separately for different locales"</span>,</div><div class="line">      <span class="attr">"values"</span>: [<span class="string">"en-GB"</span>, <span class="string">"en-US"</span>, <span class="string">"fr-CA"</span>, <span class="string">"de-DE"</span>, <span class="string">"ja-JP"</span>, <span class="string">"es-MX"</span>]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Notice that each category (except the simple feature category) provides an array of accepted toggle values.</p>
<p>All non-simple feature toggles will have the key <code>application-name/feature-name/toggle-name</code>.<br>For example, <code>main-website/show-user-section/com</code>.</p>
<p>Simple features will continue to have the key <code>application-name/feature-name</code>.</p>
<h2 id="Setting-Toggles"><a href="#Setting-Toggles" class="headerlink" title="Setting Toggles"></a>Setting Toggles</h2><p>Both simple and non-simple features are added via the application view (which is accessed via the left-hand navigation menu). Simple features are automatically set to false, this value can be changed in the feature view (by clicking the feature name).</p>
<p>A newly added non-simple feature will be initialised with no toggles values. You can add a toggle by clicking the Add Toggle button in the feature view, and choosing which toggle to add. </p>
<p><img src="/images/posts/hobknob-adding-toggle.png" alt="Adding a toggle"></p>
<p>New toggles are initially set to OFF. The toggle can be switched in the usual way by clicking the toggle button. You should also see an audit of the change in the panel below.</p>
<h2 id="Getting-Toggles"><a href="#Getting-Toggles" class="headerlink" title="Getting Toggles"></a>Getting Toggles</h2><p>All of the Hobknob <a href="https://github.com/opentable/hobknob#hobknob-clients" target="_blank" rel="external">clients</a> now support getting non-simple features toggles. The only requirement is to pass the name of the toggle, so for example in node:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nonSimpleFeatureInCom = hobknobClient.getOrDefault(<span class="string">'feature-name'</span>, <span class="string">'com'</span>, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>It is highly reccommended that you use the get or default methods when accessing non-simple features. Getting a toggle that does not exist for a non-simple feature could be a likely scenario, since you might want to only set a feature for a few toggles explicitly (e.g. com and couk) and then use the default value for the rest (e.g. jp and de).</p>
<p>The behaviour for simple features has not changed, and is backwards compatible in all client libraries.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> simpleFeature = hobknobClient.getOrDefault(<span class="string">'simple-feature'</span>, <span class="literal">true</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sometimes there is the requirement for more granularity when toggling a feature switch.&lt;br&gt;Version 2.0 of &lt;a href=&quot;https://github.com/ope
    
    </summary>
    
    
      <category term="Hobknob" scheme="http://tech.opentable.co.uk/blog/categories/Hobknob/"/>
    
  </entry>
  
  <entry>
    <title>Interacting with ElasticSearch using Hubot</title>
    <link href="http://tech.opentable.co.uk//blog/2014/11/08/interacting-with-elasticsearch-using-hubot/"/>
    <id>http://tech.opentable.co.uk//blog/2014/11/08/interacting-with-elasticsearch-using-hubot/</id>
    <published>2014-11-08T10:32:42.000Z</published>
    <updated>2017-06-30T14:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>At OpenTable, we use a few <a href="">ElasticSearch</a> clusters. Our aim was to be able to interact with our ElasticSearch clusters via <a href="http://www.hipchat.com" target="_blank" rel="external">HipChat</a> so that we could troubleshoot easily and without having to log into our VPN. We already use <a href="http://hubot.github.com" target="_blank" rel="external">Hubot</a> as part of our systems workflow, so it made sense to be able to interact with ElasticSearch with it. </p>
<h3 id="Setting-a-cluster-alias"><a href="#Setting-a-cluster-alias" class="headerlink" title="Setting a cluster alias"></a>Setting a cluster alias</h3><p>When a pager wakes me at 3am, I really do not want to have to try and type the cluster URL into my mobile hipchat client. So the first thing that was added to the script was the ability to give a cluster an alias.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">elasticsearch add alias my-test-alias http://my-cluster.com:9200</div></pre></td></tr></table></figure>
<p><img src="/images/posts/elasticsearch-add-alias.png" alt="add-alias"></p>
<p>This allows us to use that alias for all commands going forward. Please note that you can remove and query aliases as well:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">elasticsearch show aliases</div></pre></td></tr></table></figure>
<p><img src="/images/posts/elasticsearch-show-aliases.png" alt="show-alias"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">elasticsearch clear alias my-test-alias</div></pre></td></tr></table></figure>
<p><img src="/images/posts/elasticsearch-clear-alias.png" alt="clear-alias"></p>
<h3 id="Using-the-ElasticSearch-Cat-API"><a href="#Using-the-ElasticSearch-Cat-API" class="headerlink" title="Using the ElasticSearch Cat API"></a>Using the ElasticSearch Cat API</h3><p>A lot of what we do with ElasticSearch can be done via the <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/cat.html" target="_blank" rel="external">cat</a> API. This has proved extremely useful to get node status, cluster health and index status. </p>
<h4 id="Cat-Health"><a href="#Cat-Health" class="headerlink" title="Cat Health"></a>Cat Health</h4><p>As documented <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/cat-health.html#cat-health" target="_blank" rel="external">here</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">elasticsearch cluster health my-test-alias</div></pre></td></tr></table></figure>
<h4 id="Cat-Nodes"><a href="#Cat-Nodes" class="headerlink" title="Cat Nodes"></a>Cat Nodes</h4><p>As documented <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/cat-nodes.html" target="_blank" rel="external">here</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">elasticsearch cat nodes my-test-alias</div><div class="line">``` </div><div class="line"></div><div class="line">#### Cat Indices </div><div class="line">As documented [here](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/cat-indices.html)</div></pre></td></tr></table></figure>
<p>elasticsearch cat indexes my-test-alias<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### Cat Allocation</div><div class="line">As documented [here]()</div></pre></td></tr></table></figure></p>
<p>elasticsearch cat allocation my-test-alias<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### Getting the Cluster Settings</div><div class="line"></div><div class="line">Sometimes when we are rebalancing shards or recycling nodes, we want to be able to control the cluster settings. By using the cluster settings API, can have some insight into the settings currently set on the cluster:</div></pre></td></tr></table></figure></p>
<p>elasticsearch cluster settings my-test-alias<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">More information about the cluster settings API can be found [here](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/cluster-update-settings.html#cluster-settings)</div><div class="line"></div><div class="line">### Getting the Settings for an Index</div><div class="line"></div><div class="line">Should we want to start to understand the actual settings that are attributed to an index, we can use the Cat Indices settings API. More information can be found [here](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-get-settings.html)</div></pre></td></tr></table></figure></p>
<p>elasticsearch index settings my-test-alias my-index-name-2014-11-07<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### Clearing the cluster Cache</div><div class="line"></div><div class="line">The last piece of the puzzle we are able to do, is to clear the cache of the ElasticSearch cluster. This can be done as follows:</div></pre></td></tr></table></figure></p>
<p>hubot elasticsearch clear cache my-test-alias<br>```</p>
<h3 id="Where-can-I-find-the-code"><a href="#Where-can-I-find-the-code" class="headerlink" title="Where can I find the code?"></a>Where can I find the code?</h3><p>The code is available on <a href="https://github.com/stack72/hubot-elasticsearch" target="_blank" rel="external">github</a> or also as an <a href="https://www.npmjs.org/package/hubot-elasticsearch" target="_blank" rel="external">NPM package</a>. Please feel free to send PRs or create issues on our repository. All feedback is useful.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;At OpenTable, we use a few &lt;a href=&quot;&quot;&gt;ElasticSearch&lt;/a&gt; clusters. Our aim was to be able to interact with our ElasticSearch clusters via 
    
    </summary>
    
    
      <category term="Hubot" scheme="http://tech.opentable.co.uk/blog/categories/Hubot/"/>
    
      <category term="Chatops" scheme="http://tech.opentable.co.uk/blog/categories/Chatops/"/>
    
      <category term="ElasticSearch" scheme="http://tech.opentable.co.uk/blog/categories/ElasticSearch/"/>
    
  </entry>
  
</feed>
